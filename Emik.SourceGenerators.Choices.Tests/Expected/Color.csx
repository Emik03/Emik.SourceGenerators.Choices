// <auto-generated/>
// ReSharper disable RedundantNameQualifier
// ReSharper disable once CheckNamespace
#nullable enable
#pragma warning disable
namespace Emik
{
    namespace SourceGenerators
    {
        namespace Choices
        {
            namespace Tests
            {
                /// <inheritdoc cref="Emik.SourceGenerators.Choices.Tests.Color"/>
                /// <remarks>
                ///     <para>
                ///         The type <see cref="Emik.SourceGenerators.Choices.Tests.Color"/>
                ///         is an immutable disjoint union representing the following variants:
                ///     </para>
                ///     <list type="table">
                ///         <listheader>
                ///             <term>
                ///                 <c>Name</c> <see langword="as"/> <c>Type</c>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             Predicate
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             Factories
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </listheader>
                ///         <item>
                ///             <term>
                ///                 <see cref="Rgba"/> <see langword="as"/> <see cref="Emik.SourceGenerators.Choices.Tests.Color.OrRef{int}[]"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsRgba"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfRgba(Emik.SourceGenerators.Choices.Tests.Color.OrRef{int}[]?)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.Color(Emik.SourceGenerators.Choices.Tests.Color.OrRef{int}[]?)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(Emik.SourceGenerators.Choices.Tests.Color.OrRef{int}[]?)"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="Gradient"/> <see langword="as"/> <see cref="Emik.SourceGenerators.Choices.Tests.Color.OrRef{Emik.SourceGenerators.Choices.Tests.Number}[]"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsGradient"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfGradient(Emik.SourceGenerators.Choices.Tests.Color.OrRef{Emik.SourceGenerators.Choices.Tests.Number}[]?)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.Color(Emik.SourceGenerators.Choices.Tests.Color.OrRef{Emik.SourceGenerators.Choices.Tests.Number}[]?)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(Emik.SourceGenerators.Choices.Tests.Color.OrRef{Emik.SourceGenerators.Choices.Tests.Number}[]?)"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///     </list>
                /// </remarks>
                partial class Color :
                    global::System.IComparable,
                    global::System.IComparable<object>,
                    global::System.IComparable<global::Emik.SourceGenerators.Choices.Tests.Color>,
#if NET7_0_OR_GREATER
                    global::System.Numerics.IComparisonOperators<global::Emik.SourceGenerators.Choices.Tests.Color, global::Emik.SourceGenerators.Choices.Tests.Color, bool>,
#endif
                    global::System.IEquatable<object>,
                    global::System.IEquatable<global::Emik.SourceGenerators.Choices.Tests.Color>,
                    System.Collections.IList,
                    System.Collections.ICollection,
                    System.Collections.IStructuralComparable,
                    System.Collections.IStructuralEquatable,
                    System.ICloneable,
                    System.Collections.IEnumerable
                {
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    private byte Discriminator
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _reference switch
                        {
                            Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[] => 0,
                            _ => 1,
                        };
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        set { /* Intentionally left blank. */ }
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    private readonly System.Array? _reference = rgba;

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Color"/> class with the variant <see cref="Rgba"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.Color.OrRef{int}[]"/>.
                    /// </summary>
                    /// <param name="rgba">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public Color(Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]? rgba)
                        : this(rgba, default(Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?))
                    {
                        Discriminator = 0;
                        _reference = rgba;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Color"/> class with the variant <see cref="Gradient"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.Color.OrRef{Emik.SourceGenerators.Choices.Tests.Number}[]"/>.
                    /// </summary>
                    /// <param name="gradient">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public Color(Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]? gradient)
                        : this(default(Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?), gradient)
                    {
                        Discriminator = 1;
                        _reference = gradient;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.Color"/> is the variant <see cref="Rgba"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.Color.OrRef{int}[]"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    public bool IsRgba
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Rgba")]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(false, "Gradient")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator is 0;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.Color"/> is the variant <see cref="Gradient"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.Color.OrRef{Emik.SourceGenerators.Choices.Tests.Number}[]"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    public bool IsGradient
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Gradient")]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(false, "Rgba")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator is 1;
                    }

                    /// <summary>
                    /// Gets the <see cref="Emik.SourceGenerators.Choices.Tests.Color.OrRef{int}[]"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    public Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]? Rgba
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator is 0 ? (Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference! : default;
                    }

                    /// <summary>
                    /// Gets the <see cref="Emik.SourceGenerators.Choices.Tests.Color.OrRef{Emik.SourceGenerators.Choices.Tests.Number}[]"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    public Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]? Gradient
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator is 1 ? (Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference! : default;
                    }

                    /// <summary>This property exists solely to suppress lints regarding unused parameters.</summary>
                    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                    bool UsedImplicitly => gradient is var _;

                    /// <summary>
                    /// Implicitly converts the <see cref="Emik.SourceGenerators.Choices.Tests.Color.OrRef{int}[]"/> parameter to the union.
                    /// </summary>
                    /// <param name="rgba">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="rgba"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static implicit operator global::Emik.SourceGenerators.Choices.Tests.Color(Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[] rgba)
                        => new global::Emik.SourceGenerators.Choices.Tests.Color(rgba);

                    /// <summary>
                    /// Explicitly converts the union to the target type <see cref="Emik.SourceGenerators.Choices.Tests.Color.OrRef{int}[]"/>.
                    /// </summary>
                    /// <param name="x">The union to access its property.</param>
                    /// <returns>The getter of the union <paramref name="x"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static explicit operator Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?(global::Emik.SourceGenerators.Choices.Tests.Color x)
                        => x.Rgba;

                    /// <summary>
                    /// Implicitly converts the <see cref="Emik.SourceGenerators.Choices.Tests.Color.OrRef{Emik.SourceGenerators.Choices.Tests.Number}[]"/> parameter to the union.
                    /// </summary>
                    /// <param name="gradient">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="gradient"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static implicit operator global::Emik.SourceGenerators.Choices.Tests.Color(Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[] gradient)
                        => new global::Emik.SourceGenerators.Choices.Tests.Color(gradient);

                    /// <summary>
                    /// Explicitly converts the union to the target type <see cref="Emik.SourceGenerators.Choices.Tests.Color.OrRef{Emik.SourceGenerators.Choices.Tests.Number}[]"/>.
                    /// </summary>
                    /// <param name="x">The union to access its property.</param>
                    /// <returns>The getter of the union <paramref name="x"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static explicit operator Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?(global::Emik.SourceGenerators.Choices.Tests.Color x)
                        => x.Gradient;

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Color"/> class with the variant <see cref="Rgba"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.Color.OrRef{int}[]"/>.
                    /// </summary>
                    /// <param name="rgba">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="rgba"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.Color OfRgba(Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]? rgba)
                        => new global::Emik.SourceGenerators.Choices.Tests.Color(rgba);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Color"/> class with the variant <see cref="Gradient"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.Color.OrRef{Emik.SourceGenerators.Choices.Tests.Number}[]"/>.
                    /// </summary>
                    /// <param name="gradient">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="gradient"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.Color OfGradient(Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]? gradient)
                        => new global::Emik.SourceGenerators.Choices.Tests.Color(gradient);

                    /// <summary>
                    /// Determines whether the left-hand side is equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator ==(Emik.SourceGenerators.Choices.Tests.Color? left, Emik.SourceGenerators.Choices.Tests.Color? right)
                        => left is null ? right is null : right is not null &&
                            left.Discriminator == right.Discriminator &&
                            left.Discriminator switch
                            {
                                0 => global::System.Collections.Generic.EqualityComparer<Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?>.Default.Equals(((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)left._reference!), ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)right._reference!)),
                                _ => global::System.Collections.Generic.EqualityComparer<Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?>.Default.Equals(((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)left._reference!), ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)right._reference!)),
                            };

                    /// <summary>
                    /// Determines whether the left-hand side is unequal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is unequal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator !=(Emik.SourceGenerators.Choices.Tests.Color? left, Emik.SourceGenerators.Choices.Tests.Color? right)
                        => !(left == right);

                    /// <summary>
                    /// Determines whether the left-hand side is greater than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >(Emik.SourceGenerators.Choices.Tests.Color? left, Emik.SourceGenerators.Choices.Tests.Color? right)
                        => left is not null &&
                            (right is null ||
                            left.Discriminator > right.Discriminator ||
                            left.Discriminator == right.Discriminator &&
                            left.Discriminator switch
                            {
                                0 => global::System.Collections.Generic.Comparer<Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?>.Default.Compare(((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)left._reference!), ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)right._reference!)) > 0,
                                _ => global::System.Collections.Generic.Comparer<Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?>.Default.Compare(((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)left._reference!), ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)right._reference!)) > 0,
                            });

                    /// <summary>
                    /// Determines whether the left-hand side is greater than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >=(Emik.SourceGenerators.Choices.Tests.Color? left, Emik.SourceGenerators.Choices.Tests.Color? right)
                        => left == right || left > right;

                    /// <summary>
                    /// Determines whether the left-hand side is less than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <(Emik.SourceGenerators.Choices.Tests.Color? left, Emik.SourceGenerators.Choices.Tests.Color? right)
                        => right > left;

                    /// <summary>
                    /// Determines whether the left-hand side is less than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <=(Emik.SourceGenerators.Choices.Tests.Color? left, Emik.SourceGenerators.Choices.Tests.Color? right)
                        => right >= left;

                    /// <inheritdoc cref="object.Equals(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override bool Equals(object? obj)
                        => obj is global::Emik.SourceGenerators.Choices.Tests.Color x && Equals(x);

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool Equals(Emik.SourceGenerators.Choices.Tests.Color? other)
                        => this == other;

                    /// <inheritdoc cref="IComparable.CompareTo(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int CompareTo(object? obj)
                        => obj is null ? 1 : obj is global::Emik.SourceGenerators.Choices.Tests.Color x ? CompareTo(x) : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int CompareTo(Emik.SourceGenerators.Choices.Tests.Color? other)
                        => other is null ? 1 : Equals(other) ? 0 : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override int GetHashCode()
                        => unchecked(Discriminator * 8093) ^
                        (Discriminator switch
                        {
                            0 => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).GetHashCode(),
                            _ => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).GetHashCode(),
                        });

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override string ToString()
                        => Discriminator switch
                        {
                            0 => $"{nameof(Rgba)}({((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!)})",
                            _ => $"{nameof(Gradient)}({((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!)})",
                        };

                    /// <summary>
                    /// Invokes the callback based on current variance.
                    /// </summary>
                    /// <param name="onRgba">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Color"/> class with the variant <see cref="Rgba"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.Color.OrRef{int}[]"/> is held.</param>
                    /// <param name="onGradient">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Color"/> class with the variant <see cref="Gradient"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.Color.OrRef{Emik.SourceGenerators.Choices.Tests.Number}[]"/> is held.</param>
                    /// <returns>Itself.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public Emik.SourceGenerators.Choices.Tests.Color? Map(
                        global::System.Action<Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?>? onRgba = null,
                        global::System.Action<Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?>? onGradient = null
                    )
                    {
                        switch (Discriminator)
                        {
                            case 0:
                                onRgba?.Invoke(((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!));
                                return this;
                            default:
                                onGradient?.Invoke(((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!));
                                return this;
                        }
                    }

                    /// <summary>
                    /// Maps each variant to <typeparamref name="TMappingResult"/>.
                    /// </summary>
                    /// <typeparam name="TMappingResult">The resulting type from the mapping.</typeparam>
                    /// <param name="onRgba">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Color"/> class with the variant <see cref="Rgba"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.Color.OrRef{int}[]"/> is held.</param>
                    /// <param name="onGradient">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Color"/> class with the variant <see cref="Gradient"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.Color.OrRef{Emik.SourceGenerators.Choices.Tests.Number}[]"/> is held.</param>
                    /// <returns>
                    /// The resulting value from one of the parameters based on the current state of the object.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public TMappingResult Map<TMappingResult>(
                        global::System.Func<Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?, TMappingResult> onRgba,
                        global::System.Func<Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?, TMappingResult> onGradient
                    )
                        => Discriminator switch
                        {
                            0 => onRgba(((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!)),
                            _ => onGradient(((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!)),
                        };

                    /// <summary>
                    /// Gets the underlying value.
                    /// </summary>
                    /// <returns>
                    /// The underlying value from this instance.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Array GetUnderlyingValue()
                        => (System.Array)_reference!;

                    /// <inheritdoc cref="System.Collections.IList.Add(object?)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int Add(object? value)
                        => Discriminator switch
                        {
                            0 => ((System.Collections.IList)_reference!).Add(value),
                            _ => ((System.Collections.IList)_reference!).Add(value),
                        };

                    /// <inheritdoc cref="System.Collections.IList.Clear()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void Clear()
                    {
                        switch (Discriminator)
                        {
                            case 0:
                                ((System.Collections.IList)_reference!).Clear();
                                break;
                            default:
                                ((System.Collections.IList)_reference!).Clear();
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Collections.IList.Contains(object?)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool Contains(object? value)
                        => Discriminator switch
                        {
                            0 => ((System.Collections.IList)_reference!).Contains(value),
                            _ => ((System.Collections.IList)_reference!).Contains(value),
                        };

                    /// <inheritdoc cref="System.Collections.IList.IndexOf(object?)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int IndexOf(object? value)
                        => Discriminator switch
                        {
                            0 => ((System.Collections.IList)_reference!).IndexOf(value),
                            _ => ((System.Collections.IList)_reference!).IndexOf(value),
                        };

                    /// <inheritdoc cref="System.Collections.IList.Insert(int, object?)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void Insert(int index, object? value)
                    {
                        switch (Discriminator)
                        {
                            case 0:
                                ((System.Collections.IList)_reference!).Insert(index, value);
                                break;
                            default:
                                ((System.Collections.IList)_reference!).Insert(index, value);
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Collections.IList.Remove(object?)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void Remove(object? value)
                    {
                        switch (Discriminator)
                        {
                            case 0:
                                ((System.Collections.IList)_reference!).Remove(value);
                                break;
                            default:
                                ((System.Collections.IList)_reference!).Remove(value);
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Collections.IList.RemoveAt(int)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void RemoveAt(int index)
                    {
                        switch (Discriminator)
                        {
                            case 0:
                                ((System.Collections.IList)_reference!).RemoveAt(index);
                                break;
                            default:
                                ((System.Collections.IList)_reference!).RemoveAt(index);
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Collections.IList.IsFixedSize"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    public bool IsFixedSize
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator switch
                        {
                            0 => ((System.Collections.IList)_reference!).IsFixedSize,
                            _ => ((System.Collections.IList)_reference!).IsFixedSize,
                        };
                    }

                    /// <inheritdoc cref="System.Collections.IList.IsReadOnly"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    public bool IsReadOnly
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator switch
                        {
                            0 => ((System.Collections.IList)_reference!).IsReadOnly,
                            _ => ((System.Collections.IList)_reference!).IsReadOnly,
                        };
                    }

                    /// <inheritdoc cref="System.Collections.IList.this[int]"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    public object? this[int index]
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator switch
                        {
                            0 => ((System.Collections.IList)_reference!)[index],
                            _ => ((System.Collections.IList)_reference!)[index],
                        };
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        set => _ = Discriminator switch
                        {
                            0 => ((System.Collections.IList)_reference!)[index] = value,
                            _ => ((System.Collections.IList)_reference!)[index] = value,
                        };
                    }

                    /// <inheritdoc cref="System.Collections.ICollection.CopyTo(System.Array, int)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void CopyTo(global::System.Array array, int index)
                    {
                        switch (Discriminator)
                        {
                            case 0:
                                ((System.Collections.ICollection)_reference!).CopyTo(array, index);
                                break;
                            default:
                                ((System.Collections.ICollection)_reference!).CopyTo(array, index);
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Collections.ICollection.Count"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    public int Count
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator switch
                        {
                            0 => ((System.Collections.ICollection)_reference!).Count,
                            _ => ((System.Collections.ICollection)_reference!).Count,
                        };
                    }

                    /// <inheritdoc cref="System.Collections.ICollection.IsSynchronized"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    public bool IsSynchronized
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator switch
                        {
                            0 => ((System.Collections.ICollection)_reference!).IsSynchronized,
                            _ => ((System.Collections.ICollection)_reference!).IsSynchronized,
                        };
                    }

                    /// <inheritdoc cref="System.Collections.ICollection.SyncRoot"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    public object SyncRoot
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator switch
                        {
                            0 => ((System.Collections.ICollection)_reference!).SyncRoot,
                            _ => ((System.Collections.ICollection)_reference!).SyncRoot,
                        };
                    }

                    /// <inheritdoc cref="System.Collections.IStructuralComparable.CompareTo(object?, System.Collections.IComparer)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int CompareTo(object? other, global::System.Collections.IComparer comparer)
                        => Discriminator switch
                        {
                            0 => ((System.Collections.IStructuralComparable)_reference!).CompareTo(other, comparer),
                            _ => ((System.Collections.IStructuralComparable)_reference!).CompareTo(other, comparer),
                        };

                    /// <inheritdoc cref="System.Collections.IStructuralEquatable.Equals(object?, System.Collections.IEqualityComparer)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool Equals(object? other, global::System.Collections.IEqualityComparer comparer)
                        => Discriminator switch
                        {
                            0 => ((System.Collections.IStructuralEquatable)_reference!).Equals(other, comparer),
                            _ => ((System.Collections.IStructuralEquatable)_reference!).Equals(other, comparer),
                        };

                    /// <inheritdoc cref="System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int GetHashCode(global::System.Collections.IEqualityComparer comparer)
                        => Discriminator switch
                        {
                            0 => ((System.Collections.IStructuralEquatable)_reference!).GetHashCode(comparer),
                            _ => ((System.Collections.IStructuralEquatable)_reference!).GetHashCode(comparer),
                        };

                    /// <inheritdoc cref="System.ICloneable.Clone()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public object Clone()
                        => Discriminator switch
                        {
                            0 => ((System.ICloneable)_reference!).Clone(),
                            _ => ((System.ICloneable)_reference!).Clone(),
                        };

                    /// <inheritdoc cref="System.Collections.IEnumerable.GetEnumerator()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Collections.IEnumerator GetEnumerator()
                        => Discriminator switch
                        {
                            0 => ((System.Collections.IEnumerable)_reference!).GetEnumerator(),
                            _ => ((System.Collections.IEnumerable)_reference!).GetEnumerator(),
                        };

                    /// <inheritdoc cref="System.Array.CopyTo(System.Array, long)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void CopyTo(global::System.Array array, long index)
                    {
                        switch (Discriminator)
                        {
                            case 0:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).CopyTo(array, index);
                                break;
                            default:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).CopyTo(array, index);
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Array.GetLength(int)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int GetLength(int dimension)
                        => Discriminator switch
                        {
                            0 => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).GetLength(dimension),
                            _ => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).GetLength(dimension),
                        };

                    /// <inheritdoc cref="System.Array.GetLongLength(int)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public long GetLongLength(int dimension)
                        => Discriminator switch
                        {
                            0 => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).GetLongLength(dimension),
                            _ => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).GetLongLength(dimension),
                        };

                    /// <inheritdoc cref="System.Array.GetLowerBound(int)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int GetLowerBound(int dimension)
                        => Discriminator switch
                        {
                            0 => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).GetLowerBound(dimension),
                            _ => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).GetLowerBound(dimension),
                        };

                    /// <inheritdoc cref="System.Array.GetUpperBound(int)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int GetUpperBound(int dimension)
                        => Discriminator switch
                        {
                            0 => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).GetUpperBound(dimension),
                            _ => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).GetUpperBound(dimension),
                        };

                    /// <inheritdoc cref="System.Array.GetValue(int)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public object? GetValue(int index)
                        => Discriminator switch
                        {
                            0 => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).GetValue(index),
                            _ => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).GetValue(index),
                        };

                    /// <inheritdoc cref="System.Array.GetValue(int, int)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public object? GetValue(int index1, int index2)
                        => Discriminator switch
                        {
                            0 => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).GetValue(index1, index2),
                            _ => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).GetValue(index1, index2),
                        };

                    /// <inheritdoc cref="System.Array.GetValue(int, int, int)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public object? GetValue(int index1, int index2, int index3)
                        => Discriminator switch
                        {
                            0 => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).GetValue(index1, index2, index3),
                            _ => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).GetValue(index1, index2, index3),
                        };

                    /// <inheritdoc cref="System.Array.GetValue(params int[])"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public object? GetValue(params int[] indices)
                        => Discriminator switch
                        {
                            0 => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).GetValue(indices),
                            _ => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).GetValue(indices),
                        };

                    /// <inheritdoc cref="System.Array.GetValue(long)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public object? GetValue(long index)
                        => Discriminator switch
                        {
                            0 => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).GetValue(index),
                            _ => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).GetValue(index),
                        };

                    /// <inheritdoc cref="System.Array.GetValue(long, long)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public object? GetValue(long index1, long index2)
                        => Discriminator switch
                        {
                            0 => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).GetValue(index1, index2),
                            _ => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).GetValue(index1, index2),
                        };

                    /// <inheritdoc cref="System.Array.GetValue(long, long, long)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public object? GetValue(long index1, long index2, long index3)
                        => Discriminator switch
                        {
                            0 => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).GetValue(index1, index2, index3),
                            _ => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).GetValue(index1, index2, index3),
                        };

                    /// <inheritdoc cref="System.Array.GetValue(params long[])"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public object? GetValue(params long[] indices)
                        => Discriminator switch
                        {
                            0 => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).GetValue(indices),
                            _ => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).GetValue(indices),
                        };

                    /// <inheritdoc cref="System.Array.Initialize()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void Initialize()
                    {
                        switch (Discriminator)
                        {
                            case 0:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).Initialize();
                                break;
                            default:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).Initialize();
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Array.SetValue(object?, int)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void SetValue(object? value, int index)
                    {
                        switch (Discriminator)
                        {
                            case 0:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).SetValue(value, index);
                                break;
                            default:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).SetValue(value, index);
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Array.SetValue(object?, int, int)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void SetValue(object? value, int index1, int index2)
                    {
                        switch (Discriminator)
                        {
                            case 0:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).SetValue(value, index1, index2);
                                break;
                            default:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).SetValue(value, index1, index2);
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Array.SetValue(object?, int, int, int)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void SetValue(object? value, int index1, int index2, int index3)
                    {
                        switch (Discriminator)
                        {
                            case 0:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).SetValue(value, index1, index2, index3);
                                break;
                            default:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).SetValue(value, index1, index2, index3);
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Array.SetValue(object?, params int[])"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void SetValue(object? value, params int[] indices)
                    {
                        switch (Discriminator)
                        {
                            case 0:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).SetValue(value, indices);
                                break;
                            default:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).SetValue(value, indices);
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Array.SetValue(object?, long)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void SetValue(object? value, long index)
                    {
                        switch (Discriminator)
                        {
                            case 0:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).SetValue(value, index);
                                break;
                            default:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).SetValue(value, index);
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Array.SetValue(object?, long, long)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void SetValue(object? value, long index1, long index2)
                    {
                        switch (Discriminator)
                        {
                            case 0:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).SetValue(value, index1, index2);
                                break;
                            default:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).SetValue(value, index1, index2);
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Array.SetValue(object?, long, long, long)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void SetValue(object? value, long index1, long index2, long index3)
                    {
                        switch (Discriminator)
                        {
                            case 0:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).SetValue(value, index1, index2, index3);
                                break;
                            default:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).SetValue(value, index1, index2, index3);
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Array.SetValue(object?, params long[])"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void SetValue(object? value, params long[] indices)
                    {
                        switch (Discriminator)
                        {
                            case 0:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).SetValue(value, indices);
                                break;
                            default:
                                ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).SetValue(value, indices);
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Array.Length"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    public int Length
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator switch
                        {
                            0 => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).Length,
                            _ => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).Length,
                        };
                    }

                    /// <inheritdoc cref="System.Array.LongLength"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    public long LongLength
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator switch
                        {
                            0 => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).LongLength,
                            _ => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).LongLength,
                        };
                    }

                    /// <inheritdoc cref="System.Array.Rank"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    public int Rank
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator switch
                        {
                            0 => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).Rank,
                            _ => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).Rank,
                        };
                    }

                    /// <inheritdoc cref="object.GetType()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Type GetUnderlyingType()
                        => Discriminator switch
                        {
                            0 => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<int>[]?)_reference!).GetType(),
                            _ => ((Emik.SourceGenerators.Choices.Tests.Color.OrRef<Emik.SourceGenerators.Choices.Tests.Number>[]?)_reference!).GetType(),
                        };
                }
            }
        }
    }
}

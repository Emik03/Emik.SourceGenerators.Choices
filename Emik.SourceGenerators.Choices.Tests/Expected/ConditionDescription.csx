// <auto-generated/>
// ReSharper disable RedundantNameQualifier
// ReSharper disable once CheckNamespace
#nullable enable
#pragma warning disable
namespace Emik
{
    namespace SourceGenerators
    {
        namespace Choices
        {
            namespace Tests
            {
                /// <inheritdoc cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/>
                /// <remarks>
                ///     <para>
                ///         The type <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/>
                ///         is an immutable disjoint union representing the following variants:
                ///     </para>
                ///     <list type="table">
                ///         <listheader>
                ///             <term>
                ///                 <c>Name</c> <see langword="as"/> <c>Type</c>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             Predicate
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             Factory
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </listheader>
                ///         <item>
                ///             <term>
                ///                 <see cref="And"/> <see langword="as"/> <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsAnd"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <see cref="OfAnd(Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition)"/>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="Or"/> <see langword="as"/> <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsOr"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <see cref="OfOr(Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition)"/>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="Included"/> <see langword="as"/> <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsIncluded"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <see cref="OfIncluded(Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition)"/>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="Excluded"/> <see langword="as"/> <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsExcluded"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <see cref="OfExcluded(Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition)"/>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///     </list>
                /// </remarks>
                partial class ConditionDescription :
                    global::System.IComparable,
                    global::System.IComparable<object>,
                    global::System.IComparable<global::Emik.SourceGenerators.Choices.Tests.ConditionDescription>,
#if NET7_0_OR_GREATER
                    global::System.Numerics.IComparisonOperators<global::Emik.SourceGenerators.Choices.Tests.ConditionDescription, global::Emik.SourceGenerators.Choices.Tests.ConditionDescription, bool>,
#endif
                    global::System.IEquatable<object>,
                    global::System.IEquatable<global::Emik.SourceGenerators.Choices.Tests.ConditionDescription>
                {
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                    private static class Choice
                    {
                        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                        internal static class And<TAndDiscard>
                        {
                            [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                            internal static class Or<TOrDiscard>
                            {
                                [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                                internal static class Included<TIncludedDiscard>
                                {
                                    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                                    internal sealed class Excluded<TExcludedDiscard> : global::System.Attribute
                                    {
                                    }
                                }
                            }
                        }
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    private readonly byte _discriminator;

                    private readonly Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition _and;

                    private readonly Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition _included;

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/> class with the variant <see cref="And"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition"/>.
                    /// </summary>
                    /// <param name="and">The variant.</param>
                    /// <param name="x">The discriminator.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    private ConditionDescription(Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition and, byte x)
                    {
                        _discriminator = x;
                        _and = and;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/> class with the variant <see cref="Included"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition"/>.
                    /// </summary>
                    /// <param name="included">The variant.</param>
                    /// <param name="x">The discriminator.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    private ConditionDescription(Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition included, byte x)
                    {
                        _discriminator = x;
                        _included = included;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/> is the variant <see cref="And"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public bool IsAnd
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "And")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/> is the variant <see cref="Or"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public bool IsOr
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Or")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/> is the variant <see cref="Included"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public bool IsIncluded
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Included")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 2;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/> is the variant <see cref="Excluded"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public bool IsExcluded
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Excluded")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 3;
                    }

                    /// <summary>
                    /// Gets the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition And
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0 ? _and : default;
                    }

                    /// <summary>
                    /// Gets the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition Or
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1 ? _and : default;
                    }

                    /// <summary>
                    /// Gets the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition Included
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 2 ? _included : default;
                    }

                    /// <summary>
                    /// Gets the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition Excluded
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 3 ? _included : default;
                    }

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/> class with the variant <see cref="And"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition"/>.
                    /// </summary>
                    /// <param name="and">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="and"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.ConditionDescription OfAnd(Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition and)
                        => new global::Emik.SourceGenerators.Choices.Tests.ConditionDescription(and, 0);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/> class with the variant <see cref="Or"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition"/>.
                    /// </summary>
                    /// <param name="or">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="or"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.ConditionDescription OfOr(Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition or)
                        => new global::Emik.SourceGenerators.Choices.Tests.ConditionDescription(or, 1);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/> class with the variant <see cref="Included"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition"/>.
                    /// </summary>
                    /// <param name="included">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="included"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.ConditionDescription OfIncluded(Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition included)
                        => new global::Emik.SourceGenerators.Choices.Tests.ConditionDescription(included, 2);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/> class with the variant <see cref="Excluded"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition"/>.
                    /// </summary>
                    /// <param name="excluded">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="excluded"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.ConditionDescription OfExcluded(Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition excluded)
                        => new global::Emik.SourceGenerators.Choices.Tests.ConditionDescription(excluded, 3);

                    /// <summary>
                    /// Determines whether the left-hand side is equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator ==(Emik.SourceGenerators.Choices.Tests.ConditionDescription? left, Emik.SourceGenerators.Choices.Tests.ConditionDescription? right)
                        => left is null ? right is null : right is not null && (left._discriminator == right._discriminator) && (left._discriminator
                        switch
                        {
                            0 => left._and.Equals(right._and),
                            1 => left._and.Equals(right._and),
                            2 => left._included.Equals(right._included),
                            _ => left._included.Equals(right._included),
                        });

                    /// <summary>
                    /// Determines whether the left-hand side is unequal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is unequal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator !=(Emik.SourceGenerators.Choices.Tests.ConditionDescription? left, Emik.SourceGenerators.Choices.Tests.ConditionDescription? right)
                        => !(left == right);

                    /// <summary>
                    /// Determines whether the left-hand side is greater than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >(Emik.SourceGenerators.Choices.Tests.ConditionDescription? left, Emik.SourceGenerators.Choices.Tests.ConditionDescription? right)
                        => left is null ? right is null : right is not null && (left._discriminator == right._discriminator) && (left._discriminator
                        switch
                        {
                            0 => false,
                            1 => false,
                            2 => false,
                            _ => false,
                        });

                    /// <summary>
                    /// Determines whether the left-hand side is greater than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >=(Emik.SourceGenerators.Choices.Tests.ConditionDescription? left, Emik.SourceGenerators.Choices.Tests.ConditionDescription? right)
                        => left == right || left > right;

                    /// <summary>
                    /// Determines whether the left-hand side is less than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <(Emik.SourceGenerators.Choices.Tests.ConditionDescription? left, Emik.SourceGenerators.Choices.Tests.ConditionDescription? right)
                        => right > left;

                    /// <summary>
                    /// Determines whether the left-hand side is less than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <=(Emik.SourceGenerators.Choices.Tests.ConditionDescription? left, Emik.SourceGenerators.Choices.Tests.ConditionDescription? right)
                        => right >= left;

                    /// <inheritdoc cref="object.Equals(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override bool Equals(object? obj)
                        => obj is global::Emik.SourceGenerators.Choices.Tests.ConditionDescription x && Equals(x);

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool Equals(Emik.SourceGenerators.Choices.Tests.ConditionDescription? other)
                        => this == other;

                    /// <inheritdoc cref="IComparable.CompareTo(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int CompareTo(object? obj)
                        => obj is null ? 1 : obj is global::Emik.SourceGenerators.Choices.Tests.ConditionDescription x ? CompareTo(x) : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int CompareTo(Emik.SourceGenerators.Choices.Tests.ConditionDescription? other)
                        => other is null ? 1 : Equals(other) ? 0 : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override int GetHashCode()
                        => unchecked(_discriminator * 16097) ^
                        (_discriminator switch
                        {
                            0 => _and.GetHashCode(),
                            1 => _and.GetHashCode(),
                            2 => _included.GetHashCode(),
                            _ => _included.GetHashCode(),
                        });

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override string ToString()
                        => _discriminator switch
                        {
                            0 => $"{nameof(And)}({_and})",
                            1 => $"{nameof(Or)}({_and})",
                            2 => $"{nameof(Included)}({_included})",
                            _ => $"{nameof(Excluded)}({_included})",
                        };

                    /// <summary>
                    /// Invokes the callback based on current variance.
                    /// </summary>
                    /// <param name="onAnd">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/> class with the variant <see cref="And"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition"/> is held.</param>
                    /// <param name="onOr">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/> class with the variant <see cref="Or"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition"/> is held.</param>
                    /// <param name="onIncluded">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/> class with the variant <see cref="Included"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition"/> is held.</param>
                    /// <param name="onExcluded">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/> class with the variant <see cref="Excluded"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition"/> is held.</param>
                    /// <returns>Itself.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public Emik.SourceGenerators.Choices.Tests.ConditionDescription? Map(
                        global::System.Action<Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition>? onAnd = null,
                        global::System.Action<Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition>? onOr = null,
                        global::System.Action<Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition>? onIncluded = null,
                        global::System.Action<Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition>? onExcluded = null
                    )
                    {
                        switch (_discriminator)
                        {
                            case 0:
                                onAnd?.Invoke(_and);
                                return this;
                            case 1:
                                onOr?.Invoke(_and);
                                return this;
                            case 2:
                                onIncluded?.Invoke(_included);
                                return this;
                            default:
                                onExcluded?.Invoke(_included);
                                return this;
                        }
                    }

                    /// <summary>
                    /// Maps each variant to <typeparamref name="TMappingResult"/>.
                    /// </summary>
                    /// <typeparam name="TMappingResult">The resulting type from the mapping.</typeparam>
                    /// <param name="onAnd">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/> class with the variant <see cref="And"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition"/> is held.</param>
                    /// <param name="onOr">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/> class with the variant <see cref="Or"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition"/> is held.</param>
                    /// <param name="onIncluded">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/> class with the variant <see cref="Included"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition"/> is held.</param>
                    /// <param name="onExcluded">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription"/> class with the variant <see cref="Excluded"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition"/> is held.</param>
                    /// <returns>
                    /// The resulting value from one of the parameters based on the current state of the object.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public TMappingResult Map<TMappingResult>(
                        global::System.Func<Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition, TMappingResult> onAnd,
                        global::System.Func<Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition, TMappingResult> onOr,
                        global::System.Func<Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition, TMappingResult> onIncluded,
                        global::System.Func<Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition, TMappingResult> onExcluded
                    )
                        => _discriminator
                        switch
                        {
                            0 => onAnd(_and),
                            1 => onOr(_and),
                            2 => onIncluded(_included),
                            _ => onExcluded(_included),
                        };

                    /// <summary>
                    /// Gets the underlying value.
                    /// </summary>
                    /// <returns>
                    /// The underlying value from this instance.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.ValueType GetUnderlyingValue()
                        => _discriminator switch
                        {
                            0 => _and,
                            1 => _and,
                            2 => _included,
                            _ => _included,
                        };

                    /// <inheritdoc cref="object.GetType()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Type GetUnderlyingType()
                        => _discriminator switch
                        {
                            0 => typeof(Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition),
                            1 => typeof(Emik.SourceGenerators.Choices.Tests.ConditionDescription.BinaryCondition),
                            2 => typeof(Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition),
                            _ => typeof(Emik.SourceGenerators.Choices.Tests.ConditionDescription.InclusionCondition),
                        };
                }
            }
        }
    }
}

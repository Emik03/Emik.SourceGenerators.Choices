// <auto-generated/>
// ReSharper disable RedundantNameQualifier
// ReSharper disable once CheckNamespace
#nullable enable
#pragma warning disable
namespace Emik
{
    namespace SourceGenerators
    {
        namespace Choices
        {
            namespace Tests
            {
                /// <inheritdoc cref="Emik.SourceGenerators.Choices.Tests.DotFruit"/>
                /// <remarks>
                ///     <para>
                ///         The type <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit"/>
                ///         is an immutable disjoint union representing the following variants:
                ///     </para>
                ///     <list type="table">
                ///         <listheader>
                ///             <term>
                ///                 <c>Name</c> <see langword="as"/> <c>Type</c>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             Predicate
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             Factories
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </listheader>
                ///         <item>
                ///             <term>
                ///                 <see cref="Apple"/> <see langword="as"/> <see cref="byte"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsApple"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfApple(byte)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit(byte)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(byte)"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="Pear"/> <see langword="as"/> <see cref="int"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsPear"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfPear(int)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit(int)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(int)"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="Orange"/> <see langword="as"/> <see cref="System.Reflection.BindingFlags"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsOrange"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfOrange(System.Reflection.BindingFlags)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit(System.Reflection.BindingFlags)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(System.Reflection.BindingFlags)"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///     </list>
                /// </remarks>
                partial class DotFruit :
                    global::System.IComparable,
                    global::System.IComparable<object>,
                    global::System.IComparable<global::Emik.SourceGenerators.Choices.Tests.DotFruit>,
#if NET7_0_OR_GREATER
                    global::System.Numerics.IComparisonOperators<global::Emik.SourceGenerators.Choices.Tests.DotFruit, global::Emik.SourceGenerators.Choices.Tests.DotFruit, bool>,
#endif
                    global::System.IEquatable<object>,
                    global::System.IEquatable<global::Emik.SourceGenerators.Choices.Tests.DotFruit>,
                    System.IConvertible,
                    System.ISpanFormattable,
                    System.IFormattable
                {
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                    private static class Choice
                    {
                        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                        internal static class Apple<TAppleDiscard>
                        {
                            [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                            internal static class Pear<TPearDiscard>
                            {
                                [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                                internal sealed class Orange<TOrangeDiscard> : global::System.Attribute
                                {
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// Compact representation of all unmanaged memory within the union <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.InteropServices.StructLayoutAttribute(global::System.Runtime.InteropServices.LayoutKind.Explicit)]
                    partial struct Unmanaged
                    {
                        [global::System.Runtime.InteropServices.FieldOffsetAttribute(0)]
                        internal byte _apple;

                        [global::System.Runtime.InteropServices.FieldOffsetAttribute(0)]
                        internal int _pear;

                        [global::System.Runtime.InteropServices.FieldOffsetAttribute(0)]
                        internal System.Reflection.BindingFlags _orange;
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    private readonly byte _discriminator;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    private readonly Unmanaged _unmanaged;

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit"/> class with the variant <see cref="Apple"/> of type <see cref="byte"/>.
                    /// </summary>
                    /// <param name="apple">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public DotFruit(byte apple)
                    {
                        _discriminator = 0;
                        _unmanaged._apple = apple;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit"/> class with the variant <see cref="Pear"/> of type <see cref="int"/>.
                    /// </summary>
                    /// <param name="pear">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public DotFruit(int pear)
                    {
                        _discriminator = 1;
                        _unmanaged._pear = pear;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit"/> class with the variant <see cref="Orange"/> of type <see cref="System.Reflection.BindingFlags"/>.
                    /// </summary>
                    /// <param name="orange">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public DotFruit(System.Reflection.BindingFlags orange)
                    {
                        _discriminator = 2;
                        _unmanaged._orange = orange;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit"/> is the variant <see cref="Apple"/> of type <see cref="byte"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    public bool IsApple
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Apple")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit"/> is the variant <see cref="Pear"/> of type <see cref="int"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    public bool IsPear
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Pear")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit"/> is the variant <see cref="Orange"/> of type <see cref="System.Reflection.BindingFlags"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    public bool IsOrange
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Orange")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 2;
                    }

                    /// <summary>
                    /// Gets the <see cref="byte"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    public byte Apple
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0 ? _unmanaged._apple : default;
                    }

                    /// <summary>
                    /// Gets the <see cref="int"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    public int Pear
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1 ? _unmanaged._pear : default;
                    }

                    /// <summary>
                    /// Gets the <see cref="System.Reflection.BindingFlags"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    public System.Reflection.BindingFlags Orange
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 2 ? _unmanaged._orange : default;
                    }

                    /// <summary>
                    /// Implicitly converts the <see cref="byte"/> parameter to the union.
                    /// </summary>
                    /// <param name="apple">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="apple"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static implicit operator global::Emik.SourceGenerators.Choices.Tests.DotFruit(byte apple)
                        => new global::Emik.SourceGenerators.Choices.Tests.DotFruit(apple);

                    /// <summary>
                    /// Explicitly converts the union to the target type <see cref="byte"/>.
                    /// </summary>
                    /// <param name="x">The union to access its property.</param>
                    /// <returns>The getter of the union <paramref name="x"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static explicit operator byte(global::Emik.SourceGenerators.Choices.Tests.DotFruit x)
                        => x.Apple;

                    /// <summary>
                    /// Implicitly converts the <see cref="int"/> parameter to the union.
                    /// </summary>
                    /// <param name="pear">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="pear"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static implicit operator global::Emik.SourceGenerators.Choices.Tests.DotFruit(int pear)
                        => new global::Emik.SourceGenerators.Choices.Tests.DotFruit(pear);

                    /// <summary>
                    /// Explicitly converts the union to the target type <see cref="int"/>.
                    /// </summary>
                    /// <param name="x">The union to access its property.</param>
                    /// <returns>The getter of the union <paramref name="x"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static explicit operator int(global::Emik.SourceGenerators.Choices.Tests.DotFruit x)
                        => x.Pear;

                    /// <summary>
                    /// Implicitly converts the <see cref="System.Reflection.BindingFlags"/> parameter to the union.
                    /// </summary>
                    /// <param name="orange">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="orange"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static implicit operator global::Emik.SourceGenerators.Choices.Tests.DotFruit(System.Reflection.BindingFlags orange)
                        => new global::Emik.SourceGenerators.Choices.Tests.DotFruit(orange);

                    /// <summary>
                    /// Explicitly converts the union to the target type <see cref="System.Reflection.BindingFlags"/>.
                    /// </summary>
                    /// <param name="x">The union to access its property.</param>
                    /// <returns>The getter of the union <paramref name="x"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static explicit operator System.Reflection.BindingFlags(global::Emik.SourceGenerators.Choices.Tests.DotFruit x)
                        => x.Orange;

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit"/> class with the variant <see cref="Apple"/> of type <see cref="byte"/>.
                    /// </summary>
                    /// <param name="apple">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="apple"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.DotFruit OfApple(byte apple)
                        => new global::Emik.SourceGenerators.Choices.Tests.DotFruit(apple);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit"/> class with the variant <see cref="Pear"/> of type <see cref="int"/>.
                    /// </summary>
                    /// <param name="pear">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="pear"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.DotFruit OfPear(int pear)
                        => new global::Emik.SourceGenerators.Choices.Tests.DotFruit(pear);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit"/> class with the variant <see cref="Orange"/> of type <see cref="System.Reflection.BindingFlags"/>.
                    /// </summary>
                    /// <param name="orange">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="orange"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.DotFruit OfOrange(System.Reflection.BindingFlags orange)
                        => new global::Emik.SourceGenerators.Choices.Tests.DotFruit(orange);

                    /// <summary>
                    /// Determines whether the left-hand side is equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator ==(Emik.SourceGenerators.Choices.Tests.DotFruit? left, Emik.SourceGenerators.Choices.Tests.DotFruit? right)
                        => left is null ? right is null : right is not null &&
                            left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => left._unmanaged._apple == right._unmanaged._apple,
                                1 => left._unmanaged._pear == right._unmanaged._pear,
                                _ => left._unmanaged._orange == right._unmanaged._orange,
                            };

                    /// <summary>
                    /// Determines whether the left-hand side is unequal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is unequal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator !=(Emik.SourceGenerators.Choices.Tests.DotFruit? left, Emik.SourceGenerators.Choices.Tests.DotFruit? right)
                        => !(left == right);

                    /// <summary>
                    /// Determines whether the left-hand side is greater than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >(Emik.SourceGenerators.Choices.Tests.DotFruit? left, Emik.SourceGenerators.Choices.Tests.DotFruit? right)
                        => left is not null &&
                            (right is null ||
                            left._discriminator > right._discriminator ||
                            left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => left._unmanaged._apple > right._unmanaged._apple,
                                1 => left._unmanaged._pear > right._unmanaged._pear,
                                _ => left._unmanaged._orange > right._unmanaged._orange,
                            });

                    /// <summary>
                    /// Determines whether the left-hand side is greater than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >=(Emik.SourceGenerators.Choices.Tests.DotFruit? left, Emik.SourceGenerators.Choices.Tests.DotFruit? right)
                        => left == right || left > right;

                    /// <summary>
                    /// Determines whether the left-hand side is less than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <(Emik.SourceGenerators.Choices.Tests.DotFruit? left, Emik.SourceGenerators.Choices.Tests.DotFruit? right)
                        => right > left;

                    /// <summary>
                    /// Determines whether the left-hand side is less than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <=(Emik.SourceGenerators.Choices.Tests.DotFruit? left, Emik.SourceGenerators.Choices.Tests.DotFruit? right)
                        => right >= left;

                    /// <inheritdoc cref="object.Equals(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override bool Equals(object? obj)
                        => obj is global::Emik.SourceGenerators.Choices.Tests.DotFruit x && Equals(x);

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool Equals(Emik.SourceGenerators.Choices.Tests.DotFruit? other)
                        => this == other;

                    /// <inheritdoc cref="IComparable.CompareTo(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int CompareTo(object? obj)
                        => obj is null ? 1 : obj is global::Emik.SourceGenerators.Choices.Tests.DotFruit x ? CompareTo(x) : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int CompareTo(Emik.SourceGenerators.Choices.Tests.DotFruit? other)
                        => other is null ? 1 : Equals(other) ? 0 : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override int GetHashCode()
                        => unchecked(_discriminator * 25309) ^
                        (_discriminator switch
                        {
                            0 => _unmanaged._apple.GetHashCode(),
                            1 => _unmanaged._pear.GetHashCode(),
                            _ => _unmanaged._orange.GetHashCode(),
                        });

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override string ToString()
                        => _discriminator switch
                        {
                            0 => $"{nameof(Apple)}({_unmanaged._apple})",
                            1 => $"{nameof(Pear)}({_unmanaged._pear})",
                            _ => $"{nameof(Orange)}({_unmanaged._orange})",
                        };

                    /// <summary>
                    /// Invokes the callback based on current variance.
                    /// </summary>
                    /// <param name="onApple">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit"/> class with the variant <see cref="Apple"/> of type <see cref="byte"/> is held.</param>
                    /// <param name="onPear">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit"/> class with the variant <see cref="Pear"/> of type <see cref="int"/> is held.</param>
                    /// <param name="onOrange">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit"/> class with the variant <see cref="Orange"/> of type <see cref="System.Reflection.BindingFlags"/> is held.</param>
                    /// <returns>Itself.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public Emik.SourceGenerators.Choices.Tests.DotFruit? Map(
                        global::System.Action<byte>? onApple = null,
                        global::System.Action<int>? onPear = null,
                        global::System.Action<System.Reflection.BindingFlags>? onOrange = null
                    )
                    {
                        switch (_discriminator)
                        {
                            case 0:
                                onApple?.Invoke(_unmanaged._apple);
                                return this;
                            case 1:
                                onPear?.Invoke(_unmanaged._pear);
                                return this;
                            default:
                                onOrange?.Invoke(_unmanaged._orange);
                                return this;
                        }
                    }

                    /// <summary>
                    /// Maps each variant to <typeparamref name="TMappingResult"/>.
                    /// </summary>
                    /// <typeparam name="TMappingResult">The resulting type from the mapping.</typeparam>
                    /// <param name="onApple">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit"/> class with the variant <see cref="Apple"/> of type <see cref="byte"/> is held.</param>
                    /// <param name="onPear">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit"/> class with the variant <see cref="Pear"/> of type <see cref="int"/> is held.</param>
                    /// <param name="onOrange">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.DotFruit"/> class with the variant <see cref="Orange"/> of type <see cref="System.Reflection.BindingFlags"/> is held.</param>
                    /// <returns>
                    /// The resulting value from one of the parameters based on the current state of the object.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public TMappingResult Map<TMappingResult>(
                        global::System.Func<byte, TMappingResult> onApple,
                        global::System.Func<int, TMappingResult> onPear,
                        global::System.Func<System.Reflection.BindingFlags, TMappingResult> onOrange
                    )
                        => _discriminator switch
                        {
                            0 => onApple(_unmanaged._apple),
                            1 => onPear(_unmanaged._pear),
                            _ => onOrange(_unmanaged._orange),
                        };

                    /// <summary>
                    /// Gets the underlying value.
                    /// </summary>
                    /// <returns>
                    /// The underlying value from this instance.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.ISpanFormattable GetUnderlyingValue()
                        => _discriminator switch
                        {
                            0 => _unmanaged._apple,
                            1 => _unmanaged._pear,
                            _ => _unmanaged._orange,
                        };

                    /// <inheritdoc cref="System.IConvertible.GetTypeCode()"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="Apple"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Pear"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Orange"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.TypeCode GetTypeCode()
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._apple).GetTypeCode(),
                            1 => ((System.IConvertible)_unmanaged._pear).GetTypeCode(),
                            _ => ((System.IConvertible)_unmanaged._orange).GetTypeCode(),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToBoolean(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="Apple"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Pear"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Orange"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool ToBoolean(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._apple).ToBoolean(provider),
                            1 => ((System.IConvertible)_unmanaged._pear).ToBoolean(provider),
                            _ => ((System.IConvertible)_unmanaged._orange).ToBoolean(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToByte(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="Apple"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Pear"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Orange"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public byte ToByte(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._apple).ToByte(provider),
                            1 => ((System.IConvertible)_unmanaged._pear).ToByte(provider),
                            _ => ((System.IConvertible)_unmanaged._orange).ToByte(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToChar(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="Apple"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Pear"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Orange"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public char ToChar(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._apple).ToChar(provider),
                            1 => ((System.IConvertible)_unmanaged._pear).ToChar(provider),
                            _ => ((System.IConvertible)_unmanaged._orange).ToChar(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToDateTime(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="Apple"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Pear"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Orange"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.DateTime ToDateTime(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._apple).ToDateTime(provider),
                            1 => ((System.IConvertible)_unmanaged._pear).ToDateTime(provider),
                            _ => ((System.IConvertible)_unmanaged._orange).ToDateTime(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToDecimal(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="Apple"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Pear"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Orange"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public decimal ToDecimal(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._apple).ToDecimal(provider),
                            1 => ((System.IConvertible)_unmanaged._pear).ToDecimal(provider),
                            _ => ((System.IConvertible)_unmanaged._orange).ToDecimal(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToDouble(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="Apple"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Pear"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Orange"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public double ToDouble(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._apple).ToDouble(provider),
                            1 => ((System.IConvertible)_unmanaged._pear).ToDouble(provider),
                            _ => ((System.IConvertible)_unmanaged._orange).ToDouble(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToInt16(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="Apple"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Pear"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Orange"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public short ToInt16(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._apple).ToInt16(provider),
                            1 => ((System.IConvertible)_unmanaged._pear).ToInt16(provider),
                            _ => ((System.IConvertible)_unmanaged._orange).ToInt16(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToInt32(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="Apple"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Pear"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Orange"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int ToInt32(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._apple).ToInt32(provider),
                            1 => ((System.IConvertible)_unmanaged._pear).ToInt32(provider),
                            _ => ((System.IConvertible)_unmanaged._orange).ToInt32(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToInt64(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="Apple"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Pear"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Orange"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public long ToInt64(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._apple).ToInt64(provider),
                            1 => ((System.IConvertible)_unmanaged._pear).ToInt64(provider),
                            _ => ((System.IConvertible)_unmanaged._orange).ToInt64(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToSByte(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="Apple"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Pear"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Orange"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public sbyte ToSByte(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._apple).ToSByte(provider),
                            1 => ((System.IConvertible)_unmanaged._pear).ToSByte(provider),
                            _ => ((System.IConvertible)_unmanaged._orange).ToSByte(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToSingle(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="Apple"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Pear"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Orange"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public float ToSingle(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._apple).ToSingle(provider),
                            1 => ((System.IConvertible)_unmanaged._pear).ToSingle(provider),
                            _ => ((System.IConvertible)_unmanaged._orange).ToSingle(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToString(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="Apple"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Pear"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Orange"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public string ToString(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._apple).ToString(provider),
                            1 => ((System.IConvertible)_unmanaged._pear).ToString(provider),
                            _ => ((System.IConvertible)_unmanaged._orange).ToString(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToType(System.Type, System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="Apple"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Pear"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Orange"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public object ToType(global::System.Type conversionType, global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._apple).ToType(conversionType, provider),
                            1 => ((System.IConvertible)_unmanaged._pear).ToType(conversionType, provider),
                            _ => ((System.IConvertible)_unmanaged._orange).ToType(conversionType, provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToUInt16(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="Apple"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Pear"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Orange"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public ushort ToUInt16(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._apple).ToUInt16(provider),
                            1 => ((System.IConvertible)_unmanaged._pear).ToUInt16(provider),
                            _ => ((System.IConvertible)_unmanaged._orange).ToUInt16(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToUInt32(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="Apple"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Pear"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Orange"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public uint ToUInt32(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._apple).ToUInt32(provider),
                            1 => ((System.IConvertible)_unmanaged._pear).ToUInt32(provider),
                            _ => ((System.IConvertible)_unmanaged._orange).ToUInt32(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToUInt64(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="Apple"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Pear"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Orange"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public ulong ToUInt64(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._apple).ToUInt64(provider),
                            1 => ((System.IConvertible)_unmanaged._pear).ToUInt64(provider),
                            _ => ((System.IConvertible)_unmanaged._orange).ToUInt64(provider),
                        };

                    /// <inheritdoc cref="System.ISpanFormattable.TryFormat(System.Span{char}, out int, System.ReadOnlySpan{char}, System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="Apple"/> as <see cref="System.ISpanFormattable"/>,
                    /// <see cref="Pear"/> as <see cref="System.ISpanFormattable"/>,
                    /// <see cref="Orange"/> as <see cref="System.ISpanFormattable"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool TryFormat(global::System.Span<char> destination, scoped out int charsWritten, global::System.ReadOnlySpan<char> format, global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.ISpanFormattable)_unmanaged._apple).TryFormat(destination, out charsWritten, format, provider),
                            1 => ((System.ISpanFormattable)_unmanaged._pear).TryFormat(destination, out charsWritten, format, provider),
                            _ => ((System.ISpanFormattable)_unmanaged._orange).TryFormat(destination, out charsWritten, format, provider),
                        };

                    /// <inheritdoc cref="System.IFormattable.ToString(string?, System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="Apple"/> as <see cref="System.IFormattable"/>,
                    /// <see cref="Pear"/> as <see cref="System.IFormattable"/>,
                    /// <see cref="Orange"/> as <see cref="System.IFormattable"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public string ToString(string? format, global::System.IFormatProvider? formatProvider)
                        => _discriminator switch
                        {
                            0 => ((System.IFormattable)_unmanaged._apple).ToString(format, formatProvider),
                            1 => ((System.IFormattable)_unmanaged._pear).ToString(format, formatProvider),
                            _ => ((System.IFormattable)_unmanaged._orange).ToString(format, formatProvider),
                        };

                    /// <inheritdoc cref="object.GetType()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.15.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Type GetUnderlyingType()
                        => _discriminator switch
                        {
                            0 => typeof(byte),
                            1 => typeof(int),
                            _ => typeof(System.Reflection.BindingFlags),
                        };
                }
            }
        }
    }
}

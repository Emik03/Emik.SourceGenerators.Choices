// <auto-generated/>
// ReSharper disable RedundantNameQualifier
// ReSharper disable once CheckNamespace
#nullable enable
#pragma warning disable
namespace Emik
{
    namespace SourceGenerators
    {
        namespace Choices
        {
            namespace Tests
            {
                /// <inheritdoc cref="Emik.SourceGenerators.Choices.Tests.Enums"/>
                /// <remarks>
                ///     <para>
                ///         The type <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/>
                ///         is an immutable disjoint union representing the following variants:
                ///     </para>
                ///     <list type="table">
                ///         <listheader>
                ///             <term>
                ///                 <c>Name</c> <see langword="as"/> <c>Type</c>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             Predicate
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             Factories
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </listheader>
                ///         <item>
                ///             <term>
                ///                 <see cref="AssemblyNames"/> <see langword="as"/> <see cref="System.Reflection.AssemblyNameFlags"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsAssemblyNames"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfAssemblyNames(System.Reflection.AssemblyNameFlags)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.Enums(System.Reflection.AssemblyNameFlags)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(System.Reflection.AssemblyNameFlags)"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="Bindings"/> <see langword="as"/> <see cref="System.Reflection.BindingFlags"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsBindings"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfBindings(System.Reflection.BindingFlags)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.Enums(System.Reflection.BindingFlags)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(System.Reflection.BindingFlags)"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="Sockets"/> <see langword="as"/> <see cref="System.Net.Sockets.SocketFlags"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsSockets"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfSockets(System.Net.Sockets.SocketFlags)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.Enums(System.Net.Sockets.SocketFlags)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(System.Net.Sockets.SocketFlags)"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="ValueTaskSources"/> <see langword="as"/> <see cref="System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsValueTaskSources"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfValueTaskSources(System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.Enums(System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///     </list>
                /// </remarks>
                [global::System.Runtime.InteropServices.StructLayoutAttribute(global::System.Runtime.InteropServices.LayoutKind.Auto)]
                partial struct Enums :
                    global::System.IComparable,
                    global::System.IComparable<object>,
                    global::System.IComparable<global::Emik.SourceGenerators.Choices.Tests.Enums>,
#if NET7_0_OR_GREATER
                    global::System.Numerics.IComparisonOperators<global::Emik.SourceGenerators.Choices.Tests.Enums, global::Emik.SourceGenerators.Choices.Tests.Enums, bool>,
#endif
                    global::System.IEquatable<object>,
                    global::System.IEquatable<global::Emik.SourceGenerators.Choices.Tests.Enums>,
                    System.IConvertible,
                    System.IFormattable
                {
                    /// <summary>
                    /// Compact representation of all unmanaged memory within the union <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.InteropServices.StructLayoutAttribute(global::System.Runtime.InteropServices.LayoutKind.Explicit)]
                    partial struct Unmanaged
                    {
                        [global::System.Runtime.InteropServices.FieldOffsetAttribute(0)]
                        internal System.Reflection.AssemblyNameFlags _assemblyNames;

                        [global::System.Runtime.InteropServices.FieldOffsetAttribute(0)]
                        internal System.Reflection.BindingFlags _bindings;

                        [global::System.Runtime.InteropServices.FieldOffsetAttribute(0)]
                        internal System.Net.Sockets.SocketFlags _sockets;

                        [global::System.Runtime.InteropServices.FieldOffsetAttribute(0)]
                        internal System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags _valueTaskSources;
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    private readonly byte _discriminator;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    private readonly Unmanaged _unmanaged;

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> struct with the variant <see cref="AssemblyNames"/> of type <see cref="System.Reflection.AssemblyNameFlags"/>.
                    /// </summary>
                    /// <param name="assemblyNames">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public Enums(System.Reflection.AssemblyNameFlags assemblyNames)
                    {
                        _discriminator = 0;
                        _unmanaged._assemblyNames = assemblyNames;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> struct with the variant <see cref="Bindings"/> of type <see cref="System.Reflection.BindingFlags"/>.
                    /// </summary>
                    /// <param name="bindings">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public Enums(System.Reflection.BindingFlags bindings)
                    {
                        _discriminator = 1;
                        _unmanaged._bindings = bindings;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> struct with the variant <see cref="Sockets"/> of type <see cref="System.Net.Sockets.SocketFlags"/>.
                    /// </summary>
                    /// <param name="sockets">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public Enums(System.Net.Sockets.SocketFlags sockets)
                    {
                        _discriminator = 2;
                        _unmanaged._sockets = sockets;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> struct with the variant <see cref="ValueTaskSources"/> of type <see cref="System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags"/>.
                    /// </summary>
                    /// <param name="valueTaskSources">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public Enums(System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags valueTaskSources)
                    {
                        _discriminator = 3;
                        _unmanaged._valueTaskSources = valueTaskSources;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> is the variant <see cref="AssemblyNames"/> of type <see cref="System.Reflection.AssemblyNameFlags"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public readonly bool IsAssemblyNames
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "AssemblyNames")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> is the variant <see cref="Bindings"/> of type <see cref="System.Reflection.BindingFlags"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public readonly bool IsBindings
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Bindings")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> is the variant <see cref="Sockets"/> of type <see cref="System.Net.Sockets.SocketFlags"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public readonly bool IsSockets
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Sockets")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 2;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> is the variant <see cref="ValueTaskSources"/> of type <see cref="System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public readonly bool IsValueTaskSources
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "ValueTaskSources")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 3;
                    }

                    /// <summary>
                    /// Gets the <see cref="System.Reflection.AssemblyNameFlags"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public readonly System.Reflection.AssemblyNameFlags AssemblyNames
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0 ? _unmanaged._assemblyNames : default;
                    }

                    /// <summary>
                    /// Gets the <see cref="System.Reflection.BindingFlags"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public readonly System.Reflection.BindingFlags Bindings
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1 ? _unmanaged._bindings : default;
                    }

                    /// <summary>
                    /// Gets the <see cref="System.Net.Sockets.SocketFlags"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public readonly System.Net.Sockets.SocketFlags Sockets
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 2 ? _unmanaged._sockets : default;
                    }

                    /// <summary>
                    /// Gets the <see cref="System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public readonly System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags ValueTaskSources
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 3 ? _unmanaged._valueTaskSources : default;
                    }

                    /// <summary>
                    /// Implicitly converts the <see cref="System.Reflection.AssemblyNameFlags"/> parameter to the union.
                    /// </summary>
                    /// <param name="assemblyNames">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="assemblyNames"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static implicit operator global::Emik.SourceGenerators.Choices.Tests.Enums(System.Reflection.AssemblyNameFlags assemblyNames)
                        => new global::Emik.SourceGenerators.Choices.Tests.Enums(assemblyNames);

                    /// <summary>
                    /// Explicitly converts the union to the target type <see cref="System.Reflection.AssemblyNameFlags"/>.
                    /// </summary>
                    /// <param name="x">The union to access its property.</param>
                    /// <returns>The getter of the union <paramref name="x"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static explicit operator System.Reflection.AssemblyNameFlags(global::Emik.SourceGenerators.Choices.Tests.Enums x)
                        => x.AssemblyNames;

                    /// <summary>
                    /// Implicitly converts the <see cref="System.Reflection.BindingFlags"/> parameter to the union.
                    /// </summary>
                    /// <param name="bindings">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="bindings"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static implicit operator global::Emik.SourceGenerators.Choices.Tests.Enums(System.Reflection.BindingFlags bindings)
                        => new global::Emik.SourceGenerators.Choices.Tests.Enums(bindings);

                    /// <summary>
                    /// Explicitly converts the union to the target type <see cref="System.Reflection.BindingFlags"/>.
                    /// </summary>
                    /// <param name="x">The union to access its property.</param>
                    /// <returns>The getter of the union <paramref name="x"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static explicit operator System.Reflection.BindingFlags(global::Emik.SourceGenerators.Choices.Tests.Enums x)
                        => x.Bindings;

                    /// <summary>
                    /// Implicitly converts the <see cref="System.Net.Sockets.SocketFlags"/> parameter to the union.
                    /// </summary>
                    /// <param name="sockets">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="sockets"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static implicit operator global::Emik.SourceGenerators.Choices.Tests.Enums(System.Net.Sockets.SocketFlags sockets)
                        => new global::Emik.SourceGenerators.Choices.Tests.Enums(sockets);

                    /// <summary>
                    /// Explicitly converts the union to the target type <see cref="System.Net.Sockets.SocketFlags"/>.
                    /// </summary>
                    /// <param name="x">The union to access its property.</param>
                    /// <returns>The getter of the union <paramref name="x"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static explicit operator System.Net.Sockets.SocketFlags(global::Emik.SourceGenerators.Choices.Tests.Enums x)
                        => x.Sockets;

                    /// <summary>
                    /// Implicitly converts the <see cref="System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags"/> parameter to the union.
                    /// </summary>
                    /// <param name="valueTaskSources">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="valueTaskSources"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static implicit operator global::Emik.SourceGenerators.Choices.Tests.Enums(System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags valueTaskSources)
                        => new global::Emik.SourceGenerators.Choices.Tests.Enums(valueTaskSources);

                    /// <summary>
                    /// Explicitly converts the union to the target type <see cref="System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags"/>.
                    /// </summary>
                    /// <param name="x">The union to access its property.</param>
                    /// <returns>The getter of the union <paramref name="x"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static explicit operator System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags(global::Emik.SourceGenerators.Choices.Tests.Enums x)
                        => x.ValueTaskSources;

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> struct with the variant <see cref="AssemblyNames"/> of type <see cref="System.Reflection.AssemblyNameFlags"/>.
                    /// </summary>
                    /// <param name="assemblyNames">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="assemblyNames"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.Enums OfAssemblyNames(System.Reflection.AssemblyNameFlags assemblyNames)
                        => new global::Emik.SourceGenerators.Choices.Tests.Enums(assemblyNames);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> struct with the variant <see cref="Bindings"/> of type <see cref="System.Reflection.BindingFlags"/>.
                    /// </summary>
                    /// <param name="bindings">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="bindings"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.Enums OfBindings(System.Reflection.BindingFlags bindings)
                        => new global::Emik.SourceGenerators.Choices.Tests.Enums(bindings);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> struct with the variant <see cref="Sockets"/> of type <see cref="System.Net.Sockets.SocketFlags"/>.
                    /// </summary>
                    /// <param name="sockets">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="sockets"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.Enums OfSockets(System.Net.Sockets.SocketFlags sockets)
                        => new global::Emik.SourceGenerators.Choices.Tests.Enums(sockets);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> struct with the variant <see cref="ValueTaskSources"/> of type <see cref="System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags"/>.
                    /// </summary>
                    /// <param name="valueTaskSources">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="valueTaskSources"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.Enums OfValueTaskSources(System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags valueTaskSources)
                        => new global::Emik.SourceGenerators.Choices.Tests.Enums(valueTaskSources);

                    /// <summary>
                    /// Determines whether the left-hand side is equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator ==(Emik.SourceGenerators.Choices.Tests.Enums left, Emik.SourceGenerators.Choices.Tests.Enums right)
                        => left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => left._unmanaged._assemblyNames == right._unmanaged._assemblyNames,
                                1 => left._unmanaged._bindings == right._unmanaged._bindings,
                                2 => left._unmanaged._sockets == right._unmanaged._sockets,
                                _ => left._unmanaged._valueTaskSources == right._unmanaged._valueTaskSources,
                            };

                    /// <summary>
                    /// Determines whether the left-hand side is unequal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is unequal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator !=(Emik.SourceGenerators.Choices.Tests.Enums left, Emik.SourceGenerators.Choices.Tests.Enums right)
                        => !(left == right);

                    /// <summary>
                    /// Determines whether the left-hand side is greater than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >(Emik.SourceGenerators.Choices.Tests.Enums left, Emik.SourceGenerators.Choices.Tests.Enums right)
                        => left._discriminator > right._discriminator ||
                            left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => left._unmanaged._assemblyNames > right._unmanaged._assemblyNames,
                                1 => left._unmanaged._bindings > right._unmanaged._bindings,
                                2 => left._unmanaged._sockets > right._unmanaged._sockets,
                                _ => left._unmanaged._valueTaskSources > right._unmanaged._valueTaskSources,
                            };

                    /// <summary>
                    /// Determines whether the left-hand side is greater than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >=(Emik.SourceGenerators.Choices.Tests.Enums left, Emik.SourceGenerators.Choices.Tests.Enums right)
                        => left == right || left > right;

                    /// <summary>
                    /// Determines whether the left-hand side is less than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <(Emik.SourceGenerators.Choices.Tests.Enums left, Emik.SourceGenerators.Choices.Tests.Enums right)
                        => right > left;

                    /// <summary>
                    /// Determines whether the left-hand side is less than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <=(Emik.SourceGenerators.Choices.Tests.Enums left, Emik.SourceGenerators.Choices.Tests.Enums right)
                        => right >= left;

                    /// <inheritdoc cref="object.Equals(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override bool Equals(object? obj)
                        => obj is global::Emik.SourceGenerators.Choices.Tests.Enums x && Equals(x);

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly bool Equals(Emik.SourceGenerators.Choices.Tests.Enums other)
                        => this == other;

                    /// <inheritdoc cref="IComparable.CompareTo(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly int CompareTo(object? obj)
                        => obj is null ? 1 : obj is global::Emik.SourceGenerators.Choices.Tests.Enums x ? CompareTo(x) : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly int CompareTo(Emik.SourceGenerators.Choices.Tests.Enums other)
                        => Equals(other) ? 0 : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly override int GetHashCode()
                        => unchecked(_discriminator * 8923) ^
                        (_discriminator switch
                        {
                            0 => _unmanaged._assemblyNames.GetHashCode(),
                            1 => _unmanaged._bindings.GetHashCode(),
                            2 => _unmanaged._sockets.GetHashCode(),
                            _ => _unmanaged._valueTaskSources.GetHashCode(),
                        });

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly override string ToString()
                        => _discriminator switch
                        {
                            0 => $"{nameof(AssemblyNames)}({_unmanaged._assemblyNames})",
                            1 => $"{nameof(Bindings)}({_unmanaged._bindings})",
                            2 => $"{nameof(Sockets)}({_unmanaged._sockets})",
                            _ => $"{nameof(ValueTaskSources)}({_unmanaged._valueTaskSources})",
                        };

                    /// <summary>
                    /// Invokes the callback based on current variance.
                    /// </summary>
                    /// <param name="onAssemblyNames">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> struct with the variant <see cref="AssemblyNames"/> of type <see cref="System.Reflection.AssemblyNameFlags"/> is held.</param>
                    /// <param name="onBindings">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> struct with the variant <see cref="Bindings"/> of type <see cref="System.Reflection.BindingFlags"/> is held.</param>
                    /// <param name="onSockets">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> struct with the variant <see cref="Sockets"/> of type <see cref="System.Net.Sockets.SocketFlags"/> is held.</param>
                    /// <param name="onValueTaskSources">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> struct with the variant <see cref="ValueTaskSources"/> of type <see cref="System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags"/> is held.</param>
                    /// <returns>Itself.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly Emik.SourceGenerators.Choices.Tests.Enums Map(
                        global::System.Action<System.Reflection.AssemblyNameFlags>? onAssemblyNames = null,
                        global::System.Action<System.Reflection.BindingFlags>? onBindings = null,
                        global::System.Action<System.Net.Sockets.SocketFlags>? onSockets = null,
                        global::System.Action<System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags>? onValueTaskSources = null
                    )
                    {
                        switch (_discriminator)
                        {
                            case 0:
                                onAssemblyNames?.Invoke(_unmanaged._assemblyNames);
                                return this;
                            case 1:
                                onBindings?.Invoke(_unmanaged._bindings);
                                return this;
                            case 2:
                                onSockets?.Invoke(_unmanaged._sockets);
                                return this;
                            default:
                                onValueTaskSources?.Invoke(_unmanaged._valueTaskSources);
                                return this;
                        }
                    }

                    /// <summary>
                    /// Maps each variant to <typeparamref name="TMappingResult"/>.
                    /// </summary>
                    /// <typeparam name="TMappingResult">The resulting type from the mapping.</typeparam>
                    /// <param name="onAssemblyNames">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> struct with the variant <see cref="AssemblyNames"/> of type <see cref="System.Reflection.AssemblyNameFlags"/> is held.</param>
                    /// <param name="onBindings">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> struct with the variant <see cref="Bindings"/> of type <see cref="System.Reflection.BindingFlags"/> is held.</param>
                    /// <param name="onSockets">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> struct with the variant <see cref="Sockets"/> of type <see cref="System.Net.Sockets.SocketFlags"/> is held.</param>
                    /// <param name="onValueTaskSources">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Enums"/> struct with the variant <see cref="ValueTaskSources"/> of type <see cref="System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags"/> is held.</param>
                    /// <returns>
                    /// The resulting value from one of the parameters based on the current state of the object.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly TMappingResult Map<TMappingResult>(
                        global::System.Func<System.Reflection.AssemblyNameFlags, TMappingResult> onAssemblyNames,
                        global::System.Func<System.Reflection.BindingFlags, TMappingResult> onBindings,
                        global::System.Func<System.Net.Sockets.SocketFlags, TMappingResult> onSockets,
                        global::System.Func<System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags, TMappingResult> onValueTaskSources
                    )
                        => _discriminator switch
                        {
                            0 => onAssemblyNames(_unmanaged._assemblyNames),
                            1 => onBindings(_unmanaged._bindings),
                            2 => onSockets(_unmanaged._sockets),
                            _ => onValueTaskSources(_unmanaged._valueTaskSources),
                        };

                    /// <summary>
                    /// Gets the underlying value.
                    /// </summary>
                    /// <returns>
                    /// The underlying value from this instance.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly System.Enum GetUnderlyingValue()
                        => _discriminator switch
                        {
                            0 => _unmanaged._assemblyNames,
                            1 => _unmanaged._bindings,
                            2 => _unmanaged._sockets,
                            _ => _unmanaged._valueTaskSources,
                        };

                    /// <inheritdoc cref="System.IConvertible.GetTypeCode()"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="AssemblyNames"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Bindings"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Sockets"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="ValueTaskSources"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.TypeCode GetTypeCode()
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._assemblyNames).GetTypeCode(),
                            1 => ((System.IConvertible)_unmanaged._bindings).GetTypeCode(),
                            2 => ((System.IConvertible)_unmanaged._sockets).GetTypeCode(),
                            _ => ((System.IConvertible)_unmanaged._valueTaskSources).GetTypeCode(),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToBoolean(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="AssemblyNames"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Bindings"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Sockets"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="ValueTaskSources"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool ToBoolean(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._assemblyNames).ToBoolean(provider),
                            1 => ((System.IConvertible)_unmanaged._bindings).ToBoolean(provider),
                            2 => ((System.IConvertible)_unmanaged._sockets).ToBoolean(provider),
                            _ => ((System.IConvertible)_unmanaged._valueTaskSources).ToBoolean(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToByte(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="AssemblyNames"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Bindings"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Sockets"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="ValueTaskSources"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public byte ToByte(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._assemblyNames).ToByte(provider),
                            1 => ((System.IConvertible)_unmanaged._bindings).ToByte(provider),
                            2 => ((System.IConvertible)_unmanaged._sockets).ToByte(provider),
                            _ => ((System.IConvertible)_unmanaged._valueTaskSources).ToByte(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToChar(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="AssemblyNames"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Bindings"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Sockets"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="ValueTaskSources"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public char ToChar(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._assemblyNames).ToChar(provider),
                            1 => ((System.IConvertible)_unmanaged._bindings).ToChar(provider),
                            2 => ((System.IConvertible)_unmanaged._sockets).ToChar(provider),
                            _ => ((System.IConvertible)_unmanaged._valueTaskSources).ToChar(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToDateTime(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="AssemblyNames"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Bindings"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Sockets"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="ValueTaskSources"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.DateTime ToDateTime(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._assemblyNames).ToDateTime(provider),
                            1 => ((System.IConvertible)_unmanaged._bindings).ToDateTime(provider),
                            2 => ((System.IConvertible)_unmanaged._sockets).ToDateTime(provider),
                            _ => ((System.IConvertible)_unmanaged._valueTaskSources).ToDateTime(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToDecimal(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="AssemblyNames"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Bindings"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Sockets"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="ValueTaskSources"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public decimal ToDecimal(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._assemblyNames).ToDecimal(provider),
                            1 => ((System.IConvertible)_unmanaged._bindings).ToDecimal(provider),
                            2 => ((System.IConvertible)_unmanaged._sockets).ToDecimal(provider),
                            _ => ((System.IConvertible)_unmanaged._valueTaskSources).ToDecimal(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToDouble(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="AssemblyNames"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Bindings"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Sockets"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="ValueTaskSources"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public double ToDouble(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._assemblyNames).ToDouble(provider),
                            1 => ((System.IConvertible)_unmanaged._bindings).ToDouble(provider),
                            2 => ((System.IConvertible)_unmanaged._sockets).ToDouble(provider),
                            _ => ((System.IConvertible)_unmanaged._valueTaskSources).ToDouble(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToInt16(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="AssemblyNames"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Bindings"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Sockets"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="ValueTaskSources"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public short ToInt16(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._assemblyNames).ToInt16(provider),
                            1 => ((System.IConvertible)_unmanaged._bindings).ToInt16(provider),
                            2 => ((System.IConvertible)_unmanaged._sockets).ToInt16(provider),
                            _ => ((System.IConvertible)_unmanaged._valueTaskSources).ToInt16(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToInt32(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="AssemblyNames"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Bindings"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Sockets"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="ValueTaskSources"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int ToInt32(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._assemblyNames).ToInt32(provider),
                            1 => ((System.IConvertible)_unmanaged._bindings).ToInt32(provider),
                            2 => ((System.IConvertible)_unmanaged._sockets).ToInt32(provider),
                            _ => ((System.IConvertible)_unmanaged._valueTaskSources).ToInt32(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToInt64(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="AssemblyNames"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Bindings"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Sockets"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="ValueTaskSources"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public long ToInt64(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._assemblyNames).ToInt64(provider),
                            1 => ((System.IConvertible)_unmanaged._bindings).ToInt64(provider),
                            2 => ((System.IConvertible)_unmanaged._sockets).ToInt64(provider),
                            _ => ((System.IConvertible)_unmanaged._valueTaskSources).ToInt64(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToSByte(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="AssemblyNames"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Bindings"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Sockets"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="ValueTaskSources"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public sbyte ToSByte(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._assemblyNames).ToSByte(provider),
                            1 => ((System.IConvertible)_unmanaged._bindings).ToSByte(provider),
                            2 => ((System.IConvertible)_unmanaged._sockets).ToSByte(provider),
                            _ => ((System.IConvertible)_unmanaged._valueTaskSources).ToSByte(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToSingle(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="AssemblyNames"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Bindings"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Sockets"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="ValueTaskSources"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public float ToSingle(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._assemblyNames).ToSingle(provider),
                            1 => ((System.IConvertible)_unmanaged._bindings).ToSingle(provider),
                            2 => ((System.IConvertible)_unmanaged._sockets).ToSingle(provider),
                            _ => ((System.IConvertible)_unmanaged._valueTaskSources).ToSingle(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToString(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="AssemblyNames"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Bindings"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Sockets"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="ValueTaskSources"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public string ToString(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._assemblyNames).ToString(provider),
                            1 => ((System.IConvertible)_unmanaged._bindings).ToString(provider),
                            2 => ((System.IConvertible)_unmanaged._sockets).ToString(provider),
                            _ => ((System.IConvertible)_unmanaged._valueTaskSources).ToString(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToType(System.Type, System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="AssemblyNames"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Bindings"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Sockets"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="ValueTaskSources"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public object ToType(global::System.Type conversionType, global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._assemblyNames).ToType(conversionType, provider),
                            1 => ((System.IConvertible)_unmanaged._bindings).ToType(conversionType, provider),
                            2 => ((System.IConvertible)_unmanaged._sockets).ToType(conversionType, provider),
                            _ => ((System.IConvertible)_unmanaged._valueTaskSources).ToType(conversionType, provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToUInt16(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="AssemblyNames"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Bindings"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Sockets"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="ValueTaskSources"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public ushort ToUInt16(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._assemblyNames).ToUInt16(provider),
                            1 => ((System.IConvertible)_unmanaged._bindings).ToUInt16(provider),
                            2 => ((System.IConvertible)_unmanaged._sockets).ToUInt16(provider),
                            _ => ((System.IConvertible)_unmanaged._valueTaskSources).ToUInt16(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToUInt32(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="AssemblyNames"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Bindings"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Sockets"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="ValueTaskSources"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public uint ToUInt32(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._assemblyNames).ToUInt32(provider),
                            1 => ((System.IConvertible)_unmanaged._bindings).ToUInt32(provider),
                            2 => ((System.IConvertible)_unmanaged._sockets).ToUInt32(provider),
                            _ => ((System.IConvertible)_unmanaged._valueTaskSources).ToUInt32(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToUInt64(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="AssemblyNames"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Bindings"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Sockets"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="ValueTaskSources"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public ulong ToUInt64(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)_unmanaged._assemblyNames).ToUInt64(provider),
                            1 => ((System.IConvertible)_unmanaged._bindings).ToUInt64(provider),
                            2 => ((System.IConvertible)_unmanaged._sockets).ToUInt64(provider),
                            _ => ((System.IConvertible)_unmanaged._valueTaskSources).ToUInt64(provider),
                        };

                    /// <inheritdoc cref="System.IFormattable.ToString(string?, System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="AssemblyNames"/> as <see cref="System.IFormattable"/>,
                    /// <see cref="Bindings"/> as <see cref="System.IFormattable"/>,
                    /// <see cref="Sockets"/> as <see cref="System.IFormattable"/>,
                    /// <see cref="ValueTaskSources"/> as <see cref="System.IFormattable"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public string ToString(string? format, global::System.IFormatProvider? formatProvider)
                        => _discriminator switch
                        {
                            0 => ((System.IFormattable)_unmanaged._assemblyNames).ToString(format, formatProvider),
                            1 => ((System.IFormattable)_unmanaged._bindings).ToString(format, formatProvider),
                            2 => ((System.IFormattable)_unmanaged._sockets).ToString(format, formatProvider),
                            _ => ((System.IFormattable)_unmanaged._valueTaskSources).ToString(format, formatProvider),
                        };

                    /// <inheritdoc cref="System.Enum.HasFlag(System.Enum)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool HasFlag(global::System.Enum flag)
                        => _discriminator switch
                        {
                            0 => _unmanaged._assemblyNames.HasFlag(flag),
                            1 => _unmanaged._bindings.HasFlag(flag),
                            2 => _unmanaged._sockets.HasFlag(flag),
                            _ => _unmanaged._valueTaskSources.HasFlag(flag),
                        };

                    /// <inheritdoc cref="System.Enum.ToString(string?)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public string ToString(string? format)
                        => _discriminator switch
                        {
                            0 => _unmanaged._assemblyNames.ToString(format),
                            1 => _unmanaged._bindings.ToString(format),
                            2 => _unmanaged._sockets.ToString(format),
                            _ => _unmanaged._valueTaskSources.ToString(format),
                        };

                    /// <inheritdoc cref="object.GetType()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Type GetUnderlyingType()
                        => _discriminator switch
                        {
                            0 => typeof(System.Reflection.AssemblyNameFlags),
                            1 => typeof(System.Reflection.BindingFlags),
                            2 => typeof(System.Net.Sockets.SocketFlags),
                            _ => typeof(System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags),
                        };
                }
            }
        }
    }
}

// <auto-generated/>
// ReSharper disable RedundantNameQualifier
// ReSharper disable once CheckNamespace
#nullable enable
#pragma warning disable
namespace Emik
{
    namespace SourceGenerators
    {
        namespace Choices
        {
            namespace Tests
            {
                /// <inheritdoc cref="Emik.SourceGenerators.Choices.Tests.Ints"/>
                /// <remarks>
                ///     <para>
                ///         The type <see cref="Emik.SourceGenerators.Choices.Tests.Ints"/>
                ///         is an immutable disjoint union representing the following variants:
                ///     </para>
                ///     <list type="table">
                ///         <listheader>
                ///             <term>
                ///                 <c>Name</c> <see langword="as"/> <c>Type</c>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             Predicate
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             Factory
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </listheader>
                ///         <item>
                ///             <term>
                ///                 <see cref="First"/> <see langword="as"/> <see cref="int"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsFirst"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <see cref="OfFirst(int)"/>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="Second"/> <see langword="as"/> <see cref="int"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsSecond"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <see cref="OfSecond(int)"/>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///     </list>
                /// </remarks>
                [global::System.Runtime.InteropServices.StructLayoutAttribute(global::System.Runtime.InteropServices.LayoutKind.Auto)]
                partial struct Ints :
                    global::System.IComparable,
                    global::System.IComparable<object>,
                    global::System.IComparable<global::Emik.SourceGenerators.Choices.Tests.Ints>,
#if NET7_0_OR_GREATER
                    global::System.Numerics.IComparisonOperators<global::Emik.SourceGenerators.Choices.Tests.Ints, global::Emik.SourceGenerators.Choices.Tests.Ints, bool>,
#endif
                    global::System.IEquatable<object>,
                    global::System.IEquatable<global::Emik.SourceGenerators.Choices.Tests.Ints>,
                    System.IConvertible,
                    System.IComparable<int>,
                    System.IEquatable<int>,
                    System.ISpanFormattable,
                    System.IFormattable,
                    System.IUtf8SpanFormattable
                {
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    private readonly byte _discriminator;

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Ints"/> struct with the variant <see cref="First"/> of type <see cref="int"/>.
                    /// </summary>
                    /// <param name="first">The variant.</param>
                    /// <param name="x">The discriminator.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    private Ints(int first, byte x)
                    {
                        _discriminator = x;

                        _ = x is 0 ? First = first :
                            Second = first;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.Ints"/> is the variant <see cref="First"/> of type <see cref="int"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    public readonly bool IsFirst
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "First")]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(false, "Second")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.Ints"/> is the variant <see cref="Second"/> of type <see cref="int"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    public readonly bool IsSecond
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Second")]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(false, "First")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1;
                    }

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Ints"/> struct with the variant <see cref="First"/> of type <see cref="int"/>.
                    /// </summary>
                    /// <param name="first">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="first"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.Ints OfFirst(int first)
                        => new global::Emik.SourceGenerators.Choices.Tests.Ints(first, (byte)0);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Ints"/> struct with the variant <see cref="Second"/> of type <see cref="int"/>.
                    /// </summary>
                    /// <param name="second">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="second"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.Ints OfSecond(int second)
                        => new global::Emik.SourceGenerators.Choices.Tests.Ints(second, (byte)1);

                    /// <summary>
                    /// Determines whether the left-hand side is equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator ==(Emik.SourceGenerators.Choices.Tests.Ints left, Emik.SourceGenerators.Choices.Tests.Ints right)
                        => left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => left.First == right.First,
                                _ => left.Second == right.Second,
                            };

                    /// <summary>
                    /// Determines whether the left-hand side is unequal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is unequal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator !=(Emik.SourceGenerators.Choices.Tests.Ints left, Emik.SourceGenerators.Choices.Tests.Ints right)
                        => !(left == right);

                    /// <summary>
                    /// Determines whether the left-hand side is greater than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >(Emik.SourceGenerators.Choices.Tests.Ints left, Emik.SourceGenerators.Choices.Tests.Ints right)
                        => left._discriminator > right._discriminator ||
                            left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => left.First > right.First,
                                _ => left.Second > right.Second,
                            };

                    /// <summary>
                    /// Determines whether the left-hand side is greater than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >=(Emik.SourceGenerators.Choices.Tests.Ints left, Emik.SourceGenerators.Choices.Tests.Ints right)
                        => left == right || left > right;

                    /// <summary>
                    /// Determines whether the left-hand side is less than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <(Emik.SourceGenerators.Choices.Tests.Ints left, Emik.SourceGenerators.Choices.Tests.Ints right)
                        => right > left;

                    /// <summary>
                    /// Determines whether the left-hand side is less than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <=(Emik.SourceGenerators.Choices.Tests.Ints left, Emik.SourceGenerators.Choices.Tests.Ints right)
                        => right >= left;

                    /// <inheritdoc cref="object.Equals(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override bool Equals(object? obj)
                        => obj is global::Emik.SourceGenerators.Choices.Tests.Ints x && Equals(x);

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly bool Equals(Emik.SourceGenerators.Choices.Tests.Ints other)
                        => this == other;

                    /// <inheritdoc cref="IComparable.CompareTo(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly int CompareTo(object? obj)
                        => obj is null ? 1 : obj is global::Emik.SourceGenerators.Choices.Tests.Ints x ? CompareTo(x) : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly int CompareTo(Emik.SourceGenerators.Choices.Tests.Ints other)
                        => Equals(other) ? 0 : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly override int GetHashCode()
                        => unchecked(_discriminator * 4099) ^
                        (_discriminator switch
                        {
                            0 => First.GetHashCode(),
                            _ => Second.GetHashCode(),
                        });

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly override string ToString()
                        => _discriminator switch
                        {
                            0 => $"{nameof(First)}({First})",
                            _ => $"{nameof(Second)}({Second})",
                        };

                    /// <summary>
                    /// Invokes the callback based on current variance.
                    /// </summary>
                    /// <param name="onFirst">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Ints"/> struct with the variant <see cref="First"/> of type <see cref="int"/> is held.</param>
                    /// <param name="onSecond">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Ints"/> struct with the variant <see cref="Second"/> of type <see cref="int"/> is held.</param>
                    /// <returns>Itself.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly Emik.SourceGenerators.Choices.Tests.Ints Map(
                        global::System.Action<int>? onFirst = null,
                        global::System.Action<int>? onSecond = null
                    )
                    {
                        switch (_discriminator)
                        {
                            case 0:
                                onFirst?.Invoke(First);
                                return this;
                            default:
                                onSecond?.Invoke(Second);
                                return this;
                        }
                    }

                    /// <summary>
                    /// Maps each variant to <typeparamref name="TMappingResult"/>.
                    /// </summary>
                    /// <typeparam name="TMappingResult">The resulting type from the mapping.</typeparam>
                    /// <param name="onFirst">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Ints"/> struct with the variant <see cref="First"/> of type <see cref="int"/> is held.</param>
                    /// <param name="onSecond">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Ints"/> struct with the variant <see cref="Second"/> of type <see cref="int"/> is held.</param>
                    /// <returns>
                    /// The resulting value from one of the parameters based on the current state of the object.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly TMappingResult Map<TMappingResult>(
                        global::System.Func<int, TMappingResult> onFirst,
                        global::System.Func<int, TMappingResult> onSecond
                    )
                        => _discriminator switch
                        {
                            0 => onFirst(First),
                            _ => onSecond(Second),
                        };

                    /// <summary>
                    /// Gets the underlying value.
                    /// </summary>
                    /// <returns>
                    /// The underlying value from this instance.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly int GetUnderlyingValue()
                        => _discriminator switch
                        {
                            0 => First,
                            _ => Second,
                        };

                    /// <inheritdoc cref="int.CompareTo(int)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly int CompareTo(int value)
                        => _discriminator switch
                        {
                            0 => First.CompareTo(value),
                            _ => Second.CompareTo(value),
                        };

                    /// <inheritdoc cref="int.Equals(int)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly bool Equals(int obj)
                        => _discriminator switch
                        {
                            0 => First.Equals(obj),
                            _ => Second.Equals(obj),
                        };

                    /// <inheritdoc cref="int.GetTypeCode()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly System.TypeCode GetTypeCode()
                        => _discriminator switch
                        {
                            0 => First.GetTypeCode(),
                            _ => Second.GetTypeCode(),
                        };

                    /// <inheritdoc cref="int.ToString(System.IFormatProvider?)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly string ToString(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => First.ToString(provider),
                            _ => Second.ToString(provider),
                        };

                    /// <inheritdoc cref="int.ToString(string?)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly string ToString([System.Diagnostics.CodeAnalysis.StringSyntaxAttribute("NumericFormat")] string? format)
                        => _discriminator switch
                        {
                            0 => First.ToString(format),
                            _ => Second.ToString(format),
                        };

                    /// <inheritdoc cref="int.ToString(string?, System.IFormatProvider?)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly string ToString([System.Diagnostics.CodeAnalysis.StringSyntaxAttribute("NumericFormat")] string? format, global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => First.ToString(format, provider),
                            _ => Second.ToString(format, provider),
                        };

                    /// <inheritdoc cref="int.TryFormat(System.Span{byte}, out int, System.ReadOnlySpan{char}, System.IFormatProvider?)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly bool TryFormat(global::System.Span<byte> utf8Destination, scoped out int bytesWritten, [System.Diagnostics.CodeAnalysis.StringSyntaxAttribute("NumericFormat")] global::System.ReadOnlySpan<char> format = default, global::System.IFormatProvider? provider = default)
                        => _discriminator switch
                        {
                            0 => First.TryFormat(utf8Destination, out bytesWritten, format, provider),
                            _ => Second.TryFormat(utf8Destination, out bytesWritten, format, provider),
                        };

                    /// <inheritdoc cref="int.TryFormat(System.Span{char}, out int, System.ReadOnlySpan{char}, System.IFormatProvider?)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly bool TryFormat(global::System.Span<char> destination, scoped out int charsWritten, [System.Diagnostics.CodeAnalysis.StringSyntaxAttribute("NumericFormat")] global::System.ReadOnlySpan<char> format = default, global::System.IFormatProvider? provider = default)
                        => _discriminator switch
                        {
                            0 => First.TryFormat(destination, out charsWritten, format, provider),
                            _ => Second.TryFormat(destination, out charsWritten, format, provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToBoolean(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Second"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool ToBoolean(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)First).ToBoolean(provider),
                            _ => ((System.IConvertible)Second).ToBoolean(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToByte(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Second"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public byte ToByte(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)First).ToByte(provider),
                            _ => ((System.IConvertible)Second).ToByte(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToChar(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Second"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public char ToChar(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)First).ToChar(provider),
                            _ => ((System.IConvertible)Second).ToChar(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToDateTime(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Second"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.DateTime ToDateTime(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)First).ToDateTime(provider),
                            _ => ((System.IConvertible)Second).ToDateTime(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToDecimal(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Second"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public decimal ToDecimal(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)First).ToDecimal(provider),
                            _ => ((System.IConvertible)Second).ToDecimal(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToDouble(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Second"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public double ToDouble(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)First).ToDouble(provider),
                            _ => ((System.IConvertible)Second).ToDouble(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToInt16(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Second"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public short ToInt16(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)First).ToInt16(provider),
                            _ => ((System.IConvertible)Second).ToInt16(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToInt32(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Second"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int ToInt32(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)First).ToInt32(provider),
                            _ => ((System.IConvertible)Second).ToInt32(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToInt64(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Second"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public long ToInt64(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)First).ToInt64(provider),
                            _ => ((System.IConvertible)Second).ToInt64(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToSByte(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Second"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public sbyte ToSByte(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)First).ToSByte(provider),
                            _ => ((System.IConvertible)Second).ToSByte(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToSingle(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Second"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public float ToSingle(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)First).ToSingle(provider),
                            _ => ((System.IConvertible)Second).ToSingle(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToType(System.Type, System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Second"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public object ToType(global::System.Type conversionType, global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)First).ToType(conversionType, provider),
                            _ => ((System.IConvertible)Second).ToType(conversionType, provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToUInt16(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Second"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public ushort ToUInt16(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)First).ToUInt16(provider),
                            _ => ((System.IConvertible)Second).ToUInt16(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToUInt32(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Second"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public uint ToUInt32(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)First).ToUInt32(provider),
                            _ => ((System.IConvertible)Second).ToUInt32(provider),
                        };

                    /// <inheritdoc cref="System.IConvertible.ToUInt64(System.IFormatProvider?)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.IConvertible"/>,
                    /// <see cref="Second"/> as <see cref="System.IConvertible"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public ulong ToUInt64(global::System.IFormatProvider? provider)
                        => _discriminator switch
                        {
                            0 => ((System.IConvertible)First).ToUInt64(provider),
                            _ => ((System.IConvertible)Second).ToUInt64(provider),
                        };

                    /// <inheritdoc cref="System.Numerics.IBinaryInteger{TSelf}.GetByteCount()"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>,
                    /// <see cref="Second"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int GetByteCount()
                        => _discriminator switch
                        {
                            0 => ((System.Numerics.IBinaryInteger<int>)First).GetByteCount(),
                            _ => ((System.Numerics.IBinaryInteger<int>)Second).GetByteCount(),
                        };

                    /// <inheritdoc cref="System.Numerics.IBinaryInteger{TSelf}.GetShortestBitLength()"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>,
                    /// <see cref="Second"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int GetShortestBitLength()
                        => _discriminator switch
                        {
                            0 => ((System.Numerics.IBinaryInteger<int>)First).GetShortestBitLength(),
                            _ => ((System.Numerics.IBinaryInteger<int>)Second).GetShortestBitLength(),
                        };

                    /// <inheritdoc cref="System.Numerics.IBinaryInteger{TSelf}.TryWriteBigEndian(System.Span{byte}, out int)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>,
                    /// <see cref="Second"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool TryWriteBigEndian(global::System.Span<byte> destination, scoped out int bytesWritten)
                        => _discriminator switch
                        {
                            0 => ((System.Numerics.IBinaryInteger<int>)First).TryWriteBigEndian(destination, out bytesWritten),
                            _ => ((System.Numerics.IBinaryInteger<int>)Second).TryWriteBigEndian(destination, out bytesWritten),
                        };

                    /// <inheritdoc cref="System.Numerics.IBinaryInteger{TSelf}.TryWriteLittleEndian(System.Span{byte}, out int)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>,
                    /// <see cref="Second"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool TryWriteLittleEndian(global::System.Span<byte> destination, scoped out int bytesWritten)
                        => _discriminator switch
                        {
                            0 => ((System.Numerics.IBinaryInteger<int>)First).TryWriteLittleEndian(destination, out bytesWritten),
                            _ => ((System.Numerics.IBinaryInteger<int>)Second).TryWriteLittleEndian(destination, out bytesWritten),
                        };

                    /// <inheritdoc cref="System.Numerics.IBinaryInteger{TSelf}.WriteBigEndian(byte[])"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>,
                    /// <see cref="Second"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int WriteBigEndian(byte[] destination)
                        => _discriminator switch
                        {
                            0 => ((System.Numerics.IBinaryInteger<int>)First).WriteBigEndian(destination),
                            _ => ((System.Numerics.IBinaryInteger<int>)Second).WriteBigEndian(destination),
                        };

                    /// <inheritdoc cref="System.Numerics.IBinaryInteger{TSelf}.WriteBigEndian(byte[], int)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>,
                    /// <see cref="Second"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int WriteBigEndian(byte[] destination, int startIndex)
                        => _discriminator switch
                        {
                            0 => ((System.Numerics.IBinaryInteger<int>)First).WriteBigEndian(destination, startIndex),
                            _ => ((System.Numerics.IBinaryInteger<int>)Second).WriteBigEndian(destination, startIndex),
                        };

                    /// <inheritdoc cref="System.Numerics.IBinaryInteger{TSelf}.WriteBigEndian(System.Span{byte})"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>,
                    /// <see cref="Second"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int WriteBigEndian(global::System.Span<byte> destination)
                        => _discriminator switch
                        {
                            0 => ((System.Numerics.IBinaryInteger<int>)First).WriteBigEndian(destination),
                            _ => ((System.Numerics.IBinaryInteger<int>)Second).WriteBigEndian(destination),
                        };

                    /// <inheritdoc cref="System.Numerics.IBinaryInteger{TSelf}.WriteLittleEndian(byte[])"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>,
                    /// <see cref="Second"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int WriteLittleEndian(byte[] destination)
                        => _discriminator switch
                        {
                            0 => ((System.Numerics.IBinaryInteger<int>)First).WriteLittleEndian(destination),
                            _ => ((System.Numerics.IBinaryInteger<int>)Second).WriteLittleEndian(destination),
                        };

                    /// <inheritdoc cref="System.Numerics.IBinaryInteger{TSelf}.WriteLittleEndian(byte[], int)"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>,
                    /// <see cref="Second"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int WriteLittleEndian(byte[] destination, int startIndex)
                        => _discriminator switch
                        {
                            0 => ((System.Numerics.IBinaryInteger<int>)First).WriteLittleEndian(destination, startIndex),
                            _ => ((System.Numerics.IBinaryInteger<int>)Second).WriteLittleEndian(destination, startIndex),
                        };

                    /// <inheritdoc cref="System.Numerics.IBinaryInteger{TSelf}.WriteLittleEndian(System.Span{byte})"/>
                    /// <remarks>
                    /// Boxes when the current instance is
                    /// <see cref="First"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>,
                    /// <see cref="Second"/> as <see cref="System.Numerics.IBinaryInteger{int}"/>.
                    /// </remarks>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.14.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int WriteLittleEndian(global::System.Span<byte> destination)
                        => _discriminator switch
                        {
                            0 => ((System.Numerics.IBinaryInteger<int>)First).WriteLittleEndian(destination),
                            _ => ((System.Numerics.IBinaryInteger<int>)Second).WriteLittleEndian(destination),
                        };
                }
            }
        }
    }
}

// <auto-generated/>
// ReSharper disable RedundantNameQualifier
// ReSharper disable once CheckNamespace
#nullable enable
#pragma warning disable
namespace Emik
{
    namespace SourceGenerators
    {
        namespace Choices
        {
            namespace Tests
            {
                /// <inheritdoc cref="Emik.SourceGenerators.Choices.Tests.KMModule"/>
                /// <remarks>
                ///     <para>
                ///         The type <see cref="Emik.SourceGenerators.Choices.Tests.KMModule"/>
                ///         is an immutable disjoint union representing the following variants:
                ///     </para>
                ///     <list type="table">
                ///         <listheader>
                ///             <term>
                ///                 <c>Name</c> <see langword="as"/> <c>Type</c>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             Predicate
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             Factories
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </listheader>
                ///         <item>
                ///             <term>
                ///                 <see cref="Regular"/> <see langword="as"/> <see cref="KMBombModule"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsRegular"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfRegular(KMBombModule)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.KMModule(KMBombModule)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(KMBombModule)"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="Needy"/> <see langword="as"/> <see cref="KMNeedyModule"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsNeedy"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfNeedy(KMNeedyModule)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.KMModule(KMNeedyModule)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(KMNeedyModule)"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///     </list>
                /// </remarks>
                partial class KMModule :
                    global::System.IComparable,
                    global::System.IComparable<object>,
                    global::System.IComparable<global::Emik.SourceGenerators.Choices.Tests.KMModule>,
#if NET7_0_OR_GREATER
                    global::System.Numerics.IComparisonOperators<global::Emik.SourceGenerators.Choices.Tests.KMModule, global::Emik.SourceGenerators.Choices.Tests.KMModule, bool>,
#endif
                    global::System.IEquatable<object>,
                    global::System.IEquatable<global::Emik.SourceGenerators.Choices.Tests.KMModule>
                {
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    private byte Discriminator
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _reference switch
                        {
                            KMBombModule => 0,
                            _ => 1,
                        };
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        set { /* Intentionally left blank. */ }
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    private readonly UnityEngine.MonoBehaviour? _reference;

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.KMModule"/> class with the variant <see cref="Regular"/> of type <see cref="KMBombModule"/>.
                    /// </summary>
                    /// <param name="regular">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public KMModule(KMBombModule regular)
                    {
                        Discriminator = 0;
                        _reference = regular;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.KMModule"/> class with the variant <see cref="Needy"/> of type <see cref="KMNeedyModule"/>.
                    /// </summary>
                    /// <param name="needy">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public KMModule(KMNeedyModule needy)
                    {
                        Discriminator = 1;
                        _reference = needy;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.KMModule"/> is the variant <see cref="Regular"/> of type <see cref="KMBombModule"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public bool IsRegular
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Regular")]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(false, "Needy")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator is 0;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.KMModule"/> is the variant <see cref="Needy"/> of type <see cref="KMNeedyModule"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public bool IsNeedy
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Needy")]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(false, "Regular")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator is 1;
                    }

                    /// <summary>
                    /// Gets the <see cref="KMBombModule"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public KMBombModule? Regular
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator is 0 ? (KMBombModule)_reference! : default;
                    }

                    /// <summary>
                    /// Gets the <see cref="KMNeedyModule"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public KMNeedyModule? Needy
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator is 1 ? (KMNeedyModule)_reference! : default;
                    }

                    /// <summary>
                    /// Implicitly converts the <see cref="KMBombModule"/> parameter to the union.
                    /// </summary>
                    /// <param name="regular">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="regular"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static implicit operator global::Emik.SourceGenerators.Choices.Tests.KMModule(KMBombModule regular)
                        => new global::Emik.SourceGenerators.Choices.Tests.KMModule(regular);

                    /// <summary>
                    /// Explicitly converts the union to the target type <see cref="KMBombModule"/>.
                    /// </summary>
                    /// <param name="x">The union to access its property.</param>
                    /// <returns>The getter of the union <paramref name="x"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static explicit operator KMBombModule?(global::Emik.SourceGenerators.Choices.Tests.KMModule x)
                        => x.Regular;

                    /// <summary>
                    /// Implicitly converts the <see cref="KMNeedyModule"/> parameter to the union.
                    /// </summary>
                    /// <param name="needy">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="needy"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static implicit operator global::Emik.SourceGenerators.Choices.Tests.KMModule(KMNeedyModule needy)
                        => new global::Emik.SourceGenerators.Choices.Tests.KMModule(needy);

                    /// <summary>
                    /// Explicitly converts the union to the target type <see cref="KMNeedyModule"/>.
                    /// </summary>
                    /// <param name="x">The union to access its property.</param>
                    /// <returns>The getter of the union <paramref name="x"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static explicit operator KMNeedyModule?(global::Emik.SourceGenerators.Choices.Tests.KMModule x)
                        => x.Needy;

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.KMModule"/> class with the variant <see cref="Regular"/> of type <see cref="KMBombModule"/>.
                    /// </summary>
                    /// <param name="regular">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="regular"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.KMModule OfRegular(KMBombModule regular)
                        => new global::Emik.SourceGenerators.Choices.Tests.KMModule(regular);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.KMModule"/> class with the variant <see cref="Needy"/> of type <see cref="KMNeedyModule"/>.
                    /// </summary>
                    /// <param name="needy">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="needy"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.KMModule OfNeedy(KMNeedyModule needy)
                        => new global::Emik.SourceGenerators.Choices.Tests.KMModule(needy);

                    /// <summary>
                    /// Determines whether the left-hand side is equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator ==(Emik.SourceGenerators.Choices.Tests.KMModule? left, Emik.SourceGenerators.Choices.Tests.KMModule? right)
                        => left is null ? right is null : right is not null &&
                            left.Discriminator == right.Discriminator &&
                            left.Discriminator switch
                            {
                                0 => false,
                                _ => false,
                            };

                    /// <summary>
                    /// Determines whether the left-hand side is unequal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is unequal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator !=(Emik.SourceGenerators.Choices.Tests.KMModule? left, Emik.SourceGenerators.Choices.Tests.KMModule? right)
                        => !(left == right);

                    /// <summary>
                    /// Determines whether the left-hand side is greater than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >(Emik.SourceGenerators.Choices.Tests.KMModule? left, Emik.SourceGenerators.Choices.Tests.KMModule? right)
                        => left is not null &&
                            (right is null ||
                            left.Discriminator > right.Discriminator ||
                            left.Discriminator == right.Discriminator &&
                            left.Discriminator switch
                            {
                                0 => false,
                                _ => false,
                            });

                    /// <summary>
                    /// Determines whether the left-hand side is greater than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >=(Emik.SourceGenerators.Choices.Tests.KMModule? left, Emik.SourceGenerators.Choices.Tests.KMModule? right)
                        => left == right || left > right;

                    /// <summary>
                    /// Determines whether the left-hand side is less than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <(Emik.SourceGenerators.Choices.Tests.KMModule? left, Emik.SourceGenerators.Choices.Tests.KMModule? right)
                        => right > left;

                    /// <summary>
                    /// Determines whether the left-hand side is less than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <=(Emik.SourceGenerators.Choices.Tests.KMModule? left, Emik.SourceGenerators.Choices.Tests.KMModule? right)
                        => right >= left;

                    /// <inheritdoc cref="object.Equals(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override bool Equals(object? obj)
                        => obj is global::Emik.SourceGenerators.Choices.Tests.KMModule x && Equals(x);

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool Equals(Emik.SourceGenerators.Choices.Tests.KMModule? other)
                        => this == other;

                    /// <inheritdoc cref="IComparable.CompareTo(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int CompareTo(object? obj)
                        => obj is null ? 1 : obj is global::Emik.SourceGenerators.Choices.Tests.KMModule x ? CompareTo(x) : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int CompareTo(Emik.SourceGenerators.Choices.Tests.KMModule? other)
                        => other is null ? 1 : Equals(other) ? 0 : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override int GetHashCode()
                        => unchecked(Discriminator * 28019) ^
                        (Discriminator switch
                        {
                            0 => ((KMBombModule)_reference!).GetHashCode(),
                            _ => ((KMNeedyModule)_reference!).GetHashCode(),
                        });

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override string ToString()
                        => Discriminator switch
                        {
                            0 => $"{nameof(Regular)}({((KMBombModule)_reference!)})",
                            _ => $"{nameof(Needy)}({((KMNeedyModule)_reference!)})",
                        };

                    /// <summary>
                    /// Invokes the callback based on current variance.
                    /// </summary>
                    /// <param name="onRegular">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.KMModule"/> class with the variant <see cref="Regular"/> of type <see cref="KMBombModule"/> is held.</param>
                    /// <param name="onNeedy">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.KMModule"/> class with the variant <see cref="Needy"/> of type <see cref="KMNeedyModule"/> is held.</param>
                    /// <returns>Itself.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public Emik.SourceGenerators.Choices.Tests.KMModule? Map(
                        global::System.Action<KMBombModule>? onRegular = null,
                        global::System.Action<KMNeedyModule>? onNeedy = null
                    )
                    {
                        switch (Discriminator)
                        {
                            case 0:
                                onRegular?.Invoke(((KMBombModule)_reference!));
                                return this;
                            default:
                                onNeedy?.Invoke(((KMNeedyModule)_reference!));
                                return this;
                        }
                    }

                    /// <summary>
                    /// Maps each variant to <typeparamref name="TMappingResult"/>.
                    /// </summary>
                    /// <typeparam name="TMappingResult">The resulting type from the mapping.</typeparam>
                    /// <param name="onRegular">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.KMModule"/> class with the variant <see cref="Regular"/> of type <see cref="KMBombModule"/> is held.</param>
                    /// <param name="onNeedy">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.KMModule"/> class with the variant <see cref="Needy"/> of type <see cref="KMNeedyModule"/> is held.</param>
                    /// <returns>
                    /// The resulting value from one of the parameters based on the current state of the object.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public TMappingResult Map<TMappingResult>(
                        global::System.Func<KMBombModule, TMappingResult> onRegular,
                        global::System.Func<KMNeedyModule, TMappingResult> onNeedy
                    )
                        => Discriminator switch
                        {
                            0 => onRegular(((KMBombModule)_reference!)),
                            _ => onNeedy(((KMNeedyModule)_reference!)),
                        };

                    /// <summary>
                    /// Gets the underlying value.
                    /// </summary>
                    /// <returns>
                    /// The underlying value from this instance.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public UnityEngine.MonoBehaviour GetUnderlyingValue()
                        => (UnityEngine.MonoBehaviour)_reference!;

                    /// <inheritdoc cref="KMBombModule.ModuleType"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public string ModuleType
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator switch
                        {
                            0 => ((KMBombModule)_reference!).ModuleType,
                            _ => ((KMNeedyModule)_reference!).ModuleType,
                        };
                    }

                    /// <inheritdoc cref="KMBombModule.ModuleDisplayName"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public string ModuleDisplayName
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator switch
                        {
                            0 => ((KMBombModule)_reference!).ModuleDisplayName,
                            _ => ((KMNeedyModule)_reference!).ModuleDisplayName,
                        };
                    }

                    /// <inheritdoc cref="KMBombModule.RequiresTimerVisibility"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    public bool RequiresTimerVisibility
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => Discriminator switch
                        {
                            0 => ((KMBombModule)_reference!).RequiresTimerVisibility,
                            _ => ((KMNeedyModule)_reference!).RequiresTimerVisibility,
                        };
                    }

                    /// <inheritdoc cref="KMBombModule.HandlePass()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void HandlePass()
                    {
                        switch (Discriminator)
                        {
                            default:
                                ((KMBombModule)_reference!).HandlePass();
                                break;
                            case 1:
                                ((KMNeedyModule)_reference!).HandlePass();
                                break;
                        }
                    }

                    /// <inheritdoc cref="KMBombModule.HandleStrike()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void HandleStrike()
                    {
                        switch (Discriminator)
                        {
                            default:
                                ((KMBombModule)_reference!).HandleStrike();
                                break;
                            case 1:
                                ((KMNeedyModule)_reference!).HandleStrike();
                                break;
                        }
                    }

                    /// <inheritdoc cref="KMBombModule.GetRuleGenerationSeed()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.0.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int GetRuleGenerationSeed()
                        => Discriminator switch
                        {
                            0 => ((KMBombModule)_reference!).GetRuleGenerationSeed(),
                            _ => ((KMNeedyModule)_reference!).GetRuleGenerationSeed(),
                        };
                }
            }
        }
    }
}

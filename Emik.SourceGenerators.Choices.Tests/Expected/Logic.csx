// <auto-generated/>
// ReSharper disable RedundantNameQualifier
// ReSharper disable once CheckNamespace
#nullable enable
#pragma warning disable
namespace Emik
{
    namespace SourceGenerators
    {
        namespace Choices
        {
            namespace Tests
            {
                /// <inheritdoc cref="Emik.SourceGenerators.Choices.Tests.Logic"/>
                /// <remarks>
                ///     <para>
                ///         The type <see cref="Emik.SourceGenerators.Choices.Tests.Logic"/>
                ///         is an immutable disjoint union representing the following variants:
                ///     </para>
                ///     <list type="table">
                ///         <listheader>
                ///             <term>
                ///                 <c>Name</c> <see langword="as"/> <c>Type</c>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             Predicate
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             Factories
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </listheader>
                ///         <item>
                ///             <term>
                ///                 <see cref="One"/> <see langword="as"/> <see cref="string"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsOne"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfOne(string?)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.Logic(string?)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(string?)"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="Or"/> <see langword="as"/> <see cref="System.ValueTuple{T1, T2}"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsOr"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <see cref="OfOr(System.ValueTuple{T1, T2})"/>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="And"/> <see langword="as"/> <see cref="System.ValueTuple{T1, T2}"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsAnd"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <see cref="OfAnd(System.ValueTuple{T1, T2})"/>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///     </list>
                /// </remarks>
                partial class Logic :
                    global::System.IComparable,
                    global::System.IComparable<object>,
                    global::System.IComparable<global::Emik.SourceGenerators.Choices.Tests.Logic>,
#if NET7_0_OR_GREATER
                    global::System.Numerics.IComparisonOperators<global::Emik.SourceGenerators.Choices.Tests.Logic, global::Emik.SourceGenerators.Choices.Tests.Logic, bool>,
#endif
                    global::System.IEquatable<object>,
                    global::System.IEquatable<global::Emik.SourceGenerators.Choices.Tests.Logic>
                {
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    private readonly byte _discriminator;

                    private readonly string? _one = one;

                    private readonly (Emik.SourceGenerators.Choices.Tests.Logic Left, Emik.SourceGenerators.Choices.Tests.Logic Right) _or = or;

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Logic"/> class with the variant <see cref="One"/> of type <see cref="string"/>.
                    /// </summary>
                    /// <param name="one">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public Logic(string? one)
                        : this(one, default((Emik.SourceGenerators.Choices.Tests.Logic Left, Emik.SourceGenerators.Choices.Tests.Logic Right)), default((Emik.SourceGenerators.Choices.Tests.Logic left, Emik.SourceGenerators.Choices.Tests.Logic right)))
                    {
                        _discriminator = 0;
                        _one = one;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Logic"/> class with the variant <see cref="Or"/> of type <see cref="System.ValueTuple{T1, T2}"/>.
                    /// </summary>
                    /// <param name="or">The variant.</param>
                    /// <param name="x">The discriminator.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    private Logic((Emik.SourceGenerators.Choices.Tests.Logic Left, Emik.SourceGenerators.Choices.Tests.Logic Right) or, byte x)
                        : this(default(string?), or, default((Emik.SourceGenerators.Choices.Tests.Logic left, Emik.SourceGenerators.Choices.Tests.Logic right)))
                    {
                        _discriminator = x;
                        _or = or;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.Logic"/> is the variant <see cref="One"/> of type <see cref="string"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    public bool IsOne
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "One")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.Logic"/> is the variant <see cref="Or"/> of type <see cref="System.ValueTuple{T1, T2}"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    public bool IsOr
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Or")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.Logic"/> is the variant <see cref="And"/> of type <see cref="System.ValueTuple{T1, T2}"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    public bool IsAnd
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "And")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 2;
                    }

                    /// <summary>
                    /// Gets the <see cref="string"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    public string? One
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0 ? _one : default;
                    }

                    /// <summary>
                    /// Gets the <see cref="System.ValueTuple{T1, T2}"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    public (Emik.SourceGenerators.Choices.Tests.Logic Left, Emik.SourceGenerators.Choices.Tests.Logic Right) Or
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1 ? _or : default;
                    }

                    /// <summary>
                    /// Gets the <see cref="System.ValueTuple{T1, T2}"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    public (Emik.SourceGenerators.Choices.Tests.Logic left, Emik.SourceGenerators.Choices.Tests.Logic right) And
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 2 ? _or : default;
                    }

                    /// <summary>
                    /// Implicitly converts the <see cref="string"/> parameter to the union.
                    /// </summary>
                    /// <param name="one">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="one"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static implicit operator global::Emik.SourceGenerators.Choices.Tests.Logic(string one)
                        => new global::Emik.SourceGenerators.Choices.Tests.Logic(one);

                    /// <summary>
                    /// Explicitly converts the union to the target type <see cref="string"/>.
                    /// </summary>
                    /// <param name="x">The union to access its property.</param>
                    /// <returns>The getter of the union <paramref name="x"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static explicit operator string?(global::Emik.SourceGenerators.Choices.Tests.Logic x)
                        => x.One;

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Logic"/> class with the variant <see cref="One"/> of type <see cref="string"/>.
                    /// </summary>
                    /// <param name="one">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="one"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.Logic OfOne(string? one)
                        => new global::Emik.SourceGenerators.Choices.Tests.Logic(one);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Logic"/> class with the variant <see cref="Or"/> of type <see cref="System.ValueTuple{T1, T2}"/>.
                    /// </summary>
                    /// <param name="or">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="or"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.Logic OfOr((Emik.SourceGenerators.Choices.Tests.Logic Left, Emik.SourceGenerators.Choices.Tests.Logic Right) or)
                        => new global::Emik.SourceGenerators.Choices.Tests.Logic(or, (byte)1);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Logic"/> class with the variant <see cref="Or"/> of type <see cref="System.ValueTuple{T1, T2}"/>.
                    /// </summary>
                    /// <param name="left">The left item within the value to pass into the type.</param>
                    /// <param name="right">The right item within the value to pass into the type.</param>
                    /// <returns>The union containing the parameters.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.Logic OfOr(Emik.SourceGenerators.Choices.Tests.Logic left, Emik.SourceGenerators.Choices.Tests.Logic right)
                        => new global::Emik.SourceGenerators.Choices.Tests.Logic((left, right), (byte)1);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Logic"/> class with the variant <see cref="And"/> of type <see cref="System.ValueTuple{T1, T2}"/>.
                    /// </summary>
                    /// <param name="and">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="and"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.Logic OfAnd((Emik.SourceGenerators.Choices.Tests.Logic left, Emik.SourceGenerators.Choices.Tests.Logic right) and)
                        => new global::Emik.SourceGenerators.Choices.Tests.Logic(and, (byte)2);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Logic"/> class with the variant <see cref="And"/> of type <see cref="System.ValueTuple{T1, T2}"/>.
                    /// </summary>
                    /// <param name="left">The left item within the value to pass into the type.</param>
                    /// <param name="right">The right item within the value to pass into the type.</param>
                    /// <returns>The union containing the parameters.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.Logic OfAnd(Emik.SourceGenerators.Choices.Tests.Logic left, Emik.SourceGenerators.Choices.Tests.Logic right)
                        => new global::Emik.SourceGenerators.Choices.Tests.Logic((left, right), (byte)2);

                    /// <summary>
                    /// Determines whether the left-hand side is equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator ==(Emik.SourceGenerators.Choices.Tests.Logic? left, Emik.SourceGenerators.Choices.Tests.Logic? right)
                        => left is null ? right is null : right is not null &&
                            left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => left._one!.Equals(right._one!),
                                1 => left._or.Equals(right._or),
                                _ => left._or.Equals(right._or),
                            };

                    /// <summary>
                    /// Determines whether the left-hand side is unequal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is unequal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator !=(Emik.SourceGenerators.Choices.Tests.Logic? left, Emik.SourceGenerators.Choices.Tests.Logic? right)
                        => !(left == right);

                    /// <summary>
                    /// Determines whether the left-hand side is greater than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >(Emik.SourceGenerators.Choices.Tests.Logic? left, Emik.SourceGenerators.Choices.Tests.Logic? right)
                        => left is not null &&
                            (right is null ||
                            left._discriminator > right._discriminator ||
                            left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => left._one!.CompareTo(right._one!) > 0,
                                1 => left._or.CompareTo(right._or) > 0,
                                _ => left._or.CompareTo(right._or) > 0,
                            });

                    /// <summary>
                    /// Determines whether the left-hand side is greater than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >=(Emik.SourceGenerators.Choices.Tests.Logic? left, Emik.SourceGenerators.Choices.Tests.Logic? right)
                        => left == right || left > right;

                    /// <summary>
                    /// Determines whether the left-hand side is less than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <(Emik.SourceGenerators.Choices.Tests.Logic? left, Emik.SourceGenerators.Choices.Tests.Logic? right)
                        => right > left;

                    /// <summary>
                    /// Determines whether the left-hand side is less than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <=(Emik.SourceGenerators.Choices.Tests.Logic? left, Emik.SourceGenerators.Choices.Tests.Logic? right)
                        => right >= left;

                    /// <inheritdoc cref="object.Equals(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override bool Equals(object? obj)
                        => obj is global::Emik.SourceGenerators.Choices.Tests.Logic x && Equals(x);

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool Equals(Emik.SourceGenerators.Choices.Tests.Logic? other)
                        => this == other;

                    /// <inheritdoc cref="IComparable.CompareTo(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int CompareTo(object? obj)
                        => obj is null ? 1 : obj is global::Emik.SourceGenerators.Choices.Tests.Logic x ? CompareTo(x) : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int CompareTo(Emik.SourceGenerators.Choices.Tests.Logic? other)
                        => other is null ? 1 : Equals(other) ? 0 : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override int GetHashCode()
                        => unchecked(_discriminator * 29867) ^
                        (_discriminator switch
                        {
                            0 => _one!.GetHashCode(),
                            1 => _or.GetHashCode(),
                            _ => _or.GetHashCode(),
                        });

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override string ToString()
                        => _discriminator switch
                        {
                            0 => $"{nameof(One)}({_one!})",
                            1 => $"{nameof(Or)}({_or})",
                            _ => $"{nameof(And)}({_or})",
                        };

                    /// <summary>
                    /// Invokes the callback based on current variance.
                    /// </summary>
                    /// <param name="onOne">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Logic"/> class with the variant <see cref="One"/> of type <see cref="string"/> is held.</param>
                    /// <param name="onOr">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Logic"/> class with the variant <see cref="Or"/> of type <see cref="System.ValueTuple{T1, T2}"/> is held.</param>
                    /// <param name="onAnd">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Logic"/> class with the variant <see cref="And"/> of type <see cref="System.ValueTuple{T1, T2}"/> is held.</param>
                    /// <returns>Itself.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public Emik.SourceGenerators.Choices.Tests.Logic? Map(
                        global::System.Action<string?>? onOne = null,
                        global::System.Action<(Emik.SourceGenerators.Choices.Tests.Logic Left, Emik.SourceGenerators.Choices.Tests.Logic Right)>? onOr = null,
                        global::System.Action<(Emik.SourceGenerators.Choices.Tests.Logic left, Emik.SourceGenerators.Choices.Tests.Logic right)>? onAnd = null
                    )
                    {
                        switch (_discriminator)
                        {
                            case 0:
                                onOne?.Invoke(_one!);
                                return this;
                            case 1:
                                onOr?.Invoke(_or);
                                return this;
                            default:
                                onAnd?.Invoke(_or);
                                return this;
                        }
                    }

                    /// <summary>
                    /// Maps each variant to <typeparamref name="TMappingResult"/>.
                    /// </summary>
                    /// <typeparam name="TMappingResult">The resulting type from the mapping.</typeparam>
                    /// <param name="onOne">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Logic"/> class with the variant <see cref="One"/> of type <see cref="string"/> is held.</param>
                    /// <param name="onOr">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Logic"/> class with the variant <see cref="Or"/> of type <see cref="System.ValueTuple{T1, T2}"/> is held.</param>
                    /// <param name="onAnd">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Logic"/> class with the variant <see cref="And"/> of type <see cref="System.ValueTuple{T1, T2}"/> is held.</param>
                    /// <returns>
                    /// The resulting value from one of the parameters based on the current state of the object.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public TMappingResult Map<TMappingResult>(
                        global::System.Func<string?, TMappingResult> onOne,
                        global::System.Func<(Emik.SourceGenerators.Choices.Tests.Logic Left, Emik.SourceGenerators.Choices.Tests.Logic Right), TMappingResult> onOr,
                        global::System.Func<(Emik.SourceGenerators.Choices.Tests.Logic left, Emik.SourceGenerators.Choices.Tests.Logic right), TMappingResult> onAnd
                    )
                        => _discriminator switch
                        {
                            0 => onOne(_one!),
                            1 => onOr(_or),
                            _ => onAnd(_or),
                        };

                    /// <summary>
                    /// Gets the underlying value.
                    /// </summary>
                    /// <returns>
                    /// The underlying value from this instance.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.IComparable GetUnderlyingValue()
                        => _discriminator switch
                        {
                            0 => _one!,
                            1 => _or,
                            _ => _or,
                        };

                    /// <inheritdoc cref="object.GetType()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.7.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Type GetUnderlyingType()
                        => _discriminator switch
                        {
                            0 => typeof(string),
                            1 => typeof((Emik.SourceGenerators.Choices.Tests.Logic Left, Emik.SourceGenerators.Choices.Tests.Logic Right)),
                            _ => typeof((Emik.SourceGenerators.Choices.Tests.Logic left, Emik.SourceGenerators.Choices.Tests.Logic right)),
                        };
                }
            }
        }
    }
}

// <auto-generated/>
// ReSharper disable RedundantNameQualifier
// ReSharper disable once CheckNamespace
#nullable enable
#pragma warning disable
namespace Emik
{
    namespace SourceGenerators
    {
        namespace Choices
        {
            namespace Tests
            {
                /// <inheritdoc cref="Emik.SourceGenerators.Choices.Tests.Pointers"/>
                /// <remarks>
                ///     <para>
                ///         The type <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/>
                ///         is an immutable disjoint union representing the following variants:
                ///     </para>
                ///     <list type="table">
                ///         <listheader>
                ///             <term>
                ///                 <c>Name</c> <see langword="as"/> <c>Type</c>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             Predicate
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             Factories
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </listheader>
                ///         <item>
                ///             <term>
                ///                 <see cref="Bytes"/> <see langword="as"/> <see cref="byte*"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsBytes"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfBytes(byte*)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.Pointers(byte*)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(byte*)"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="Chars"/> <see langword="as"/> <see cref="char*"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsChars"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfChars(char*)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.Pointers(char*)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(char*)"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="Native"/> <see langword="as"/> <see cref="nint"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsNative"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfNative(nint)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.Pointers(nint)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(nint)"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///     </list>
                /// </remarks>
                [global::System.Runtime.InteropServices.StructLayoutAttribute(global::System.Runtime.InteropServices.LayoutKind.Auto)]
                partial struct Pointers :
                    global::System.IComparable,
                    global::System.IComparable<object>,
                    global::System.IComparable<global::Emik.SourceGenerators.Choices.Tests.Pointers>,
#if NET7_0_OR_GREATER
                    global::System.Numerics.IComparisonOperators<global::Emik.SourceGenerators.Choices.Tests.Pointers, global::Emik.SourceGenerators.Choices.Tests.Pointers, bool>,
#endif
                    global::System.IEquatable<object>,
                    global::System.IEquatable<global::Emik.SourceGenerators.Choices.Tests.Pointers>
                {
                    /// <summary>
                    /// Compact representation of all unmanaged memory within the union <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Runtime.InteropServices.StructLayoutAttribute(global::System.Runtime.InteropServices.LayoutKind.Explicit)]
                    partial struct Unmanaged
                    {
                        [global::System.Runtime.InteropServices.FieldOffsetAttribute(0)]
                        internal unsafe byte* _bytes;

                        [global::System.Runtime.InteropServices.FieldOffsetAttribute(0)]
                        internal unsafe char* _chars;

                        [global::System.Runtime.InteropServices.FieldOffsetAttribute(0)]
                        internal nint _native;
                    }

                    /// <summary>
                    /// Explicit side effect delegate for the <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/> struct with the variant <see cref="Bytes"/> of type <see cref="byte*"/> due to it being a pointer type.
                    /// </summary>
                    /// <param name="bytes">The referenced value.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    public unsafe delegate void BytesHandler(byte* bytes);

                    /// <summary>
                    /// Explicit mapper delegate for the <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/> struct with the variant <see cref="Bytes"/> of type <see cref="byte*"/> due to it being a pointer type.
                    /// </summary>
                    /// <typeparam name="TMappingResult">The type of value to return.</typeparam>
                    /// <param name="bytes">The referenced value.</param>
                    /// <returns>The result of the mapping.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    public unsafe delegate TMappingResult BytesHandler<out TMappingResult>(byte* bytes);

                    /// <summary>
                    /// Explicit side effect delegate for the <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/> struct with the variant <see cref="Chars"/> of type <see cref="char*"/> due to it being a pointer type.
                    /// </summary>
                    /// <param name="chars">The referenced value.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    public unsafe delegate void CharsHandler(char* chars);

                    /// <summary>
                    /// Explicit mapper delegate for the <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/> struct with the variant <see cref="Chars"/> of type <see cref="char*"/> due to it being a pointer type.
                    /// </summary>
                    /// <typeparam name="TMappingResult">The type of value to return.</typeparam>
                    /// <param name="chars">The referenced value.</param>
                    /// <returns>The result of the mapping.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    public unsafe delegate TMappingResult CharsHandler<out TMappingResult>(char* chars);

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    private readonly byte _discriminator;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    private readonly unsafe Unmanaged _unmanaged = new Unmanaged() { _bytes = bytes };

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/> struct with the variant <see cref="Bytes"/> of type <see cref="byte*"/>.
                    /// </summary>
                    /// <param name="bytes">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public unsafe Pointers(byte* bytes)
                        : this(bytes, default(char*), default(nint))
                    {
                        _discriminator = 0;
                        _unmanaged._bytes = bytes;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/> struct with the variant <see cref="Chars"/> of type <see cref="char*"/>.
                    /// </summary>
                    /// <param name="chars">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public unsafe Pointers(char* chars)
                        : this(default(byte*), chars, default(nint))
                    {
                        _discriminator = 1;
                        _unmanaged._chars = chars;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/> struct with the variant <see cref="Native"/> of type <see cref="nint"/>.
                    /// </summary>
                    /// <param name="native">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public unsafe Pointers(nint native)
                        : this(default(byte*), default(char*), native)
                    {
                        _discriminator = 2;
                        _unmanaged._native = native;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/> is the variant <see cref="Bytes"/> of type <see cref="byte*"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    public readonly bool IsBytes
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Bytes")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/> is the variant <see cref="Chars"/> of type <see cref="char*"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    public readonly bool IsChars
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Chars")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/> is the variant <see cref="Native"/> of type <see cref="nint"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    public readonly bool IsNative
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Native")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 2;
                    }

                    /// <summary>
                    /// Gets the <see cref="byte*"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    public readonly unsafe byte* Bytes
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0 ? _unmanaged._bytes : default;
                    }

                    /// <summary>
                    /// Gets the <see cref="char*"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    public readonly unsafe char* Chars
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1 ? _unmanaged._chars : default;
                    }

                    /// <summary>
                    /// Gets the <see cref="nint"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    public readonly nint Native
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 2 ? _unmanaged._native : default;
                    }

                    /// <summary>This property exists solely to suppress lints regarding unused parameters.</summary>
                    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                    unsafe bool UsedImplicitly => chars is var _ && native is var _;

                    /// <summary>
                    /// Implicitly converts the <see cref="byte*"/> parameter to the union.
                    /// </summary>
                    /// <param name="bytes">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="bytes"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static unsafe implicit operator global::Emik.SourceGenerators.Choices.Tests.Pointers(byte* bytes)
                        => new global::Emik.SourceGenerators.Choices.Tests.Pointers(bytes);

                    /// <summary>
                    /// Explicitly converts the union to the target type <see cref="byte*"/>.
                    /// </summary>
                    /// <param name="x">The union to access its property.</param>
                    /// <returns>The getter of the union <paramref name="x"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static unsafe explicit operator byte*(global::Emik.SourceGenerators.Choices.Tests.Pointers x)
                        => x.Bytes;

                    /// <summary>
                    /// Implicitly converts the <see cref="char*"/> parameter to the union.
                    /// </summary>
                    /// <param name="chars">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="chars"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static unsafe implicit operator global::Emik.SourceGenerators.Choices.Tests.Pointers(char* chars)
                        => new global::Emik.SourceGenerators.Choices.Tests.Pointers(chars);

                    /// <summary>
                    /// Explicitly converts the union to the target type <see cref="char*"/>.
                    /// </summary>
                    /// <param name="x">The union to access its property.</param>
                    /// <returns>The getter of the union <paramref name="x"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static unsafe explicit operator char*(global::Emik.SourceGenerators.Choices.Tests.Pointers x)
                        => x.Chars;

                    /// <summary>
                    /// Implicitly converts the <see cref="nint"/> parameter to the union.
                    /// </summary>
                    /// <param name="native">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="native"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static implicit operator global::Emik.SourceGenerators.Choices.Tests.Pointers(nint native)
                        => new global::Emik.SourceGenerators.Choices.Tests.Pointers(native);

                    /// <summary>
                    /// Explicitly converts the union to the target type <see cref="nint"/>.
                    /// </summary>
                    /// <param name="x">The union to access its property.</param>
                    /// <returns>The getter of the union <paramref name="x"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static explicit operator nint(global::Emik.SourceGenerators.Choices.Tests.Pointers x)
                        => x.Native;

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/> struct with the variant <see cref="Bytes"/> of type <see cref="byte*"/>.
                    /// </summary>
                    /// <param name="bytes">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="bytes"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static unsafe global::Emik.SourceGenerators.Choices.Tests.Pointers OfBytes(byte* bytes)
                        => new global::Emik.SourceGenerators.Choices.Tests.Pointers(bytes);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/> struct with the variant <see cref="Chars"/> of type <see cref="char*"/>.
                    /// </summary>
                    /// <param name="chars">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="chars"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static unsafe global::Emik.SourceGenerators.Choices.Tests.Pointers OfChars(char* chars)
                        => new global::Emik.SourceGenerators.Choices.Tests.Pointers(chars);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/> struct with the variant <see cref="Native"/> of type <see cref="nint"/>.
                    /// </summary>
                    /// <param name="native">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="native"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.Pointers OfNative(nint native)
                        => new global::Emik.SourceGenerators.Choices.Tests.Pointers(native);

                    /// <summary>
                    /// Determines whether the left-hand side is equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static unsafe bool operator ==(Emik.SourceGenerators.Choices.Tests.Pointers left, Emik.SourceGenerators.Choices.Tests.Pointers right)
                        => left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => left._unmanaged._bytes == right._unmanaged._bytes,
                                1 => left._unmanaged._chars == right._unmanaged._chars,
                                _ => left._unmanaged._native == right._unmanaged._native,
                            };

                    /// <summary>
                    /// Determines whether the left-hand side is unequal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is unequal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator !=(Emik.SourceGenerators.Choices.Tests.Pointers left, Emik.SourceGenerators.Choices.Tests.Pointers right)
                        => !(left == right);

                    /// <summary>
                    /// Determines whether the left-hand side is greater than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static unsafe bool operator >(Emik.SourceGenerators.Choices.Tests.Pointers left, Emik.SourceGenerators.Choices.Tests.Pointers right)
                        => left._discriminator > right._discriminator ||
                            left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => left._unmanaged._bytes > right._unmanaged._bytes,
                                1 => left._unmanaged._chars > right._unmanaged._chars,
                                _ => left._unmanaged._native > right._unmanaged._native,
                            };

                    /// <summary>
                    /// Determines whether the left-hand side is greater than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >=(Emik.SourceGenerators.Choices.Tests.Pointers left, Emik.SourceGenerators.Choices.Tests.Pointers right)
                        => left == right || left > right;

                    /// <summary>
                    /// Determines whether the left-hand side is less than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <(Emik.SourceGenerators.Choices.Tests.Pointers left, Emik.SourceGenerators.Choices.Tests.Pointers right)
                        => right > left;

                    /// <summary>
                    /// Determines whether the left-hand side is less than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <=(Emik.SourceGenerators.Choices.Tests.Pointers left, Emik.SourceGenerators.Choices.Tests.Pointers right)
                        => right >= left;

                    /// <inheritdoc cref="object.Equals(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override bool Equals(object? obj)
                        => obj is global::Emik.SourceGenerators.Choices.Tests.Pointers x && Equals(x);

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly bool Equals(Emik.SourceGenerators.Choices.Tests.Pointers other)
                        => this == other;

                    /// <inheritdoc cref="IComparable.CompareTo(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly int CompareTo(object? obj)
                        => obj is null ? 1 : obj is global::Emik.SourceGenerators.Choices.Tests.Pointers x ? CompareTo(x) : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly int CompareTo(Emik.SourceGenerators.Choices.Tests.Pointers other)
                        => Equals(other) ? 0 : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly unsafe override int GetHashCode()
                        => unchecked(_discriminator * 22157) ^
                        (_discriminator switch
                        {
                            0 => (int)(nint)_unmanaged._bytes,
                            1 => (int)(nint)_unmanaged._chars,
                            _ => _unmanaged._native.GetHashCode(),
                        });

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly unsafe override string ToString()
                        => _discriminator switch
                        {
                            0 => $"{nameof(Bytes)}({(nint)_unmanaged._bytes})",
                            1 => $"{nameof(Chars)}({(nint)_unmanaged._chars})",
                            _ => $"{nameof(Native)}({_unmanaged._native})",
                        };

                    /// <summary>
                    /// Invokes the callback based on current variance.
                    /// </summary>
                    /// <param name="onBytes">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/> struct with the variant <see cref="Bytes"/> of type <see cref="byte*"/> is held.</param>
                    /// <param name="onChars">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/> struct with the variant <see cref="Chars"/> of type <see cref="char*"/> is held.</param>
                    /// <param name="onNative">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/> struct with the variant <see cref="Native"/> of type <see cref="nint"/> is held.</param>
                    /// <returns>Itself.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly unsafe Emik.SourceGenerators.Choices.Tests.Pointers Map(
                        BytesHandler? onBytes = null,
                        CharsHandler? onChars = null,
                        global::System.Action<nint>? onNative = null
                    )
                    {
                        switch (_discriminator)
                        {
                            case 0:
                                onBytes?.Invoke(_unmanaged._bytes);
                                return this;
                            case 1:
                                onChars?.Invoke(_unmanaged._chars);
                                return this;
                            default:
                                onNative?.Invoke(_unmanaged._native);
                                return this;
                        }
                    }

                    /// <summary>
                    /// Maps each variant to <typeparamref name="TMappingResult"/>.
                    /// </summary>
                    /// <typeparam name="TMappingResult">The resulting type from the mapping.</typeparam>
                    /// <param name="onBytes">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/> struct with the variant <see cref="Bytes"/> of type <see cref="byte*"/> is held.</param>
                    /// <param name="onChars">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/> struct with the variant <see cref="Chars"/> of type <see cref="char*"/> is held.</param>
                    /// <param name="onNative">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Pointers"/> struct with the variant <see cref="Native"/> of type <see cref="nint"/> is held.</param>
                    /// <returns>
                    /// The resulting value from one of the parameters based on the current state of the object.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.6.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly unsafe TMappingResult Map<TMappingResult>(
                        BytesHandler<TMappingResult> onBytes,
                        CharsHandler<TMappingResult> onChars,
                        global::System.Func<nint, TMappingResult> onNative
                    )
                        => _discriminator switch
                        {
                            0 => onBytes(_unmanaged._bytes),
                            1 => onChars(_unmanaged._chars),
                            _ => onNative(_unmanaged._native),
                        };
                }
            }
        }
    }
}

// <auto-generated/>
// ReSharper disable RedundantNameQualifier
// ReSharper disable once CheckNamespace
#nullable enable
#pragma warning disable
namespace Emik
{
    namespace SourceGenerators
    {
        namespace Choices
        {
            namespace Tests
            {
                /// <inheritdoc cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive"/>
                /// <remarks>
                ///     <para>
                ///         The type <see cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive"/>
                ///         is an immutable disjoint union representing the following variants:
                ///     </para>
                ///     <list type="table">
                ///         <listheader>
                ///             <term>
                ///                 <c>Name</c> <see langword="as"/> <c>Type</c>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             Predicate
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             Factories
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </listheader>
                ///         <item>
                ///             <term>
                ///                 <see cref="Recursion"/> <see langword="as"/> <see cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsRecursion"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <see cref="OfRecursion(Emik.SourceGenerators.Choices.Tests.SelfRecursive)"/>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="Hope"/> <see langword="as"/> <see cref="int"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsHope"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfHope(int)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive(int)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(int)"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///     </list>
                /// </remarks>
                partial class SelfRecursive :
                    global::System.IComparable,
                    global::System.IComparable<object>,
                    global::System.IComparable<global::Emik.SourceGenerators.Choices.Tests.SelfRecursive>,
#if NET7_0_OR_GREATER
                    global::System.Numerics.IComparisonOperators<global::Emik.SourceGenerators.Choices.Tests.SelfRecursive, global::Emik.SourceGenerators.Choices.Tests.SelfRecursive, bool>,
#endif
                    global::System.IEquatable<object>,
                    global::System.IEquatable<global::Emik.SourceGenerators.Choices.Tests.SelfRecursive>
                {
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    private readonly byte _discriminator;

                    private readonly int _hope;

                    private readonly Emik.SourceGenerators.Choices.Tests.SelfRecursive? _recursion = recursion;

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive"/> class with the variant <see cref="Recursion"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive"/>.
                    /// </summary>
                    /// <param name="recursion">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public SelfRecursive(Emik.SourceGenerators.Choices.Tests.SelfRecursive recursion)
                        : this(recursion, default(int))
                    {
                        _discriminator = 0;
                        _recursion = recursion;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive"/> class with the variant <see cref="Hope"/> of type <see cref="int"/>.
                    /// </summary>
                    /// <param name="hope">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public SelfRecursive(int hope)
                        : this(default(Emik.SourceGenerators.Choices.Tests.SelfRecursive), hope)
                    {
                        _discriminator = 1;
                        _hope = hope;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive"/> is the variant <see cref="Recursion"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    public bool IsRecursion
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Recursion")]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(false, "Hope")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive"/> is the variant <see cref="Hope"/> of type <see cref="int"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    public bool IsHope
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Hope")]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(false, "Recursion")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1;
                    }

                    /// <summary>
                    /// Gets the <see cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    public Emik.SourceGenerators.Choices.Tests.SelfRecursive? Recursion
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0 ? _recursion : default;
                    }

                    /// <summary>
                    /// Gets the <see cref="int"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    public int Hope
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1 ? _hope : default;
                    }

                    /// <summary>
                    /// Implicitly converts the <see cref="int"/> parameter to the union.
                    /// </summary>
                    /// <param name="hope">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="hope"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static implicit operator global::Emik.SourceGenerators.Choices.Tests.SelfRecursive(int hope)
                        => new global::Emik.SourceGenerators.Choices.Tests.SelfRecursive(hope);

                    /// <summary>
                    /// Explicitly converts the union to the target type <see cref="int"/>.
                    /// </summary>
                    /// <param name="x">The union to access its property.</param>
                    /// <returns>The getter of the union <paramref name="x"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static explicit operator int(global::Emik.SourceGenerators.Choices.Tests.SelfRecursive x)
                        => x.Hope;

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive"/> class with the variant <see cref="Recursion"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive"/>.
                    /// </summary>
                    /// <param name="recursion">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="recursion"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.SelfRecursive OfRecursion(Emik.SourceGenerators.Choices.Tests.SelfRecursive recursion)
                        => new global::Emik.SourceGenerators.Choices.Tests.SelfRecursive(recursion);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive"/> class with the variant <see cref="Hope"/> of type <see cref="int"/>.
                    /// </summary>
                    /// <param name="hope">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="hope"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.SelfRecursive OfHope(int hope)
                        => new global::Emik.SourceGenerators.Choices.Tests.SelfRecursive(hope);

                    /// <summary>
                    /// Determines whether the left-hand side is equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator ==(Emik.SourceGenerators.Choices.Tests.SelfRecursive? left, Emik.SourceGenerators.Choices.Tests.SelfRecursive? right)
                        => left is null ? right is null : right is not null &&
                            left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => global::System.Collections.Generic.EqualityComparer<Emik.SourceGenerators.Choices.Tests.SelfRecursive>.Default.Equals(left._recursion!, right._recursion!),
                                _ => left._hope == right._hope,
                            };

                    /// <summary>
                    /// Determines whether the left-hand side is unequal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is unequal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator !=(Emik.SourceGenerators.Choices.Tests.SelfRecursive? left, Emik.SourceGenerators.Choices.Tests.SelfRecursive? right)
                        => !(left == right);

                    /// <summary>
                    /// Determines whether the left-hand side is greater than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >(Emik.SourceGenerators.Choices.Tests.SelfRecursive? left, Emik.SourceGenerators.Choices.Tests.SelfRecursive? right)
                        => left is not null &&
                            (right is null ||
                            left._discriminator > right._discriminator ||
                            left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => global::System.Collections.Generic.Comparer<Emik.SourceGenerators.Choices.Tests.SelfRecursive>.Default.Compare(left._recursion!, right._recursion!) > 0,
                                _ => left._hope > right._hope,
                            });

                    /// <summary>
                    /// Determines whether the left-hand side is greater than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >=(Emik.SourceGenerators.Choices.Tests.SelfRecursive? left, Emik.SourceGenerators.Choices.Tests.SelfRecursive? right)
                        => left == right || left > right;

                    /// <summary>
                    /// Determines whether the left-hand side is less than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <(Emik.SourceGenerators.Choices.Tests.SelfRecursive? left, Emik.SourceGenerators.Choices.Tests.SelfRecursive? right)
                        => right > left;

                    /// <summary>
                    /// Determines whether the left-hand side is less than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <=(Emik.SourceGenerators.Choices.Tests.SelfRecursive? left, Emik.SourceGenerators.Choices.Tests.SelfRecursive? right)
                        => right >= left;

                    /// <inheritdoc cref="object.Equals(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override bool Equals(object? obj)
                        => obj is global::Emik.SourceGenerators.Choices.Tests.SelfRecursive x && Equals(x);

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool Equals(Emik.SourceGenerators.Choices.Tests.SelfRecursive? other)
                        => this == other;

                    /// <inheritdoc cref="IComparable.CompareTo(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int CompareTo(object? obj)
                        => obj is null ? 1 : obj is global::Emik.SourceGenerators.Choices.Tests.SelfRecursive x ? CompareTo(x) : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int CompareTo(Emik.SourceGenerators.Choices.Tests.SelfRecursive? other)
                        => other is null ? 1 : Equals(other) ? 0 : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override int GetHashCode()
                        => unchecked(_discriminator * 11497) ^
                        (_discriminator switch
                        {
                            0 => _recursion!.GetHashCode(),
                            _ => _hope.GetHashCode(),
                        });

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override string ToString()
                        => _discriminator switch
                        {
                            0 => $"{nameof(Recursion)}({_recursion!})",
                            _ => $"{nameof(Hope)}({_hope})",
                        };

                    /// <summary>
                    /// Invokes the callback based on current variance.
                    /// </summary>
                    /// <param name="onRecursion">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive"/> class with the variant <see cref="Recursion"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive"/> is held.</param>
                    /// <param name="onHope">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive"/> class with the variant <see cref="Hope"/> of type <see cref="int"/> is held.</param>
                    /// <returns>Itself.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public Emik.SourceGenerators.Choices.Tests.SelfRecursive? Map(
                        global::System.Action<Emik.SourceGenerators.Choices.Tests.SelfRecursive>? onRecursion = null,
                        global::System.Action<int>? onHope = null
                    )
                    {
                        switch (_discriminator)
                        {
                            case 0:
                                onRecursion?.Invoke(_recursion!);
                                return this;
                            default:
                                onHope?.Invoke(_hope);
                                return this;
                        }
                    }

                    /// <summary>
                    /// Maps each variant to <typeparamref name="TMappingResult"/>.
                    /// </summary>
                    /// <typeparam name="TMappingResult">The resulting type from the mapping.</typeparam>
                    /// <param name="onRecursion">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive"/> class with the variant <see cref="Recursion"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive"/> is held.</param>
                    /// <param name="onHope">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.SelfRecursive"/> class with the variant <see cref="Hope"/> of type <see cref="int"/> is held.</param>
                    /// <returns>
                    /// The resulting value from one of the parameters based on the current state of the object.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public TMappingResult Map<TMappingResult>(
                        global::System.Func<Emik.SourceGenerators.Choices.Tests.SelfRecursive, TMappingResult> onRecursion,
                        global::System.Func<int, TMappingResult> onHope
                    )
                        => _discriminator switch
                        {
                            0 => onRecursion(_recursion!),
                            _ => onHope(_hope),
                        };

                    /// <summary>
                    /// Gets the underlying value.
                    /// </summary>
                    /// <returns>
                    /// The underlying value from this instance.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public object GetUnderlyingValue()
                        => _discriminator switch
                        {
                            0 => _recursion!,
                            _ => _hope,
                        };

                    /// <inheritdoc cref="object.GetType()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.9.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Type GetUnderlyingType()
                        => _discriminator switch
                        {
                            0 => _recursion!.GetType(),
                            _ => typeof(int),
                        };
                }
            }
        }
    }
}

// <auto-generated/>
// ReSharper disable RedundantNameQualifier
// ReSharper disable once CheckNamespace
#nullable enable
#pragma warning disable
namespace Emik
{
    namespace SourceGenerators
    {
        namespace Choices
        {
            namespace Tests
            {
                /// <inheritdoc cref="Emik.SourceGenerators.Choices.Tests.SuperTask"/>
                /// <remarks>
                ///     <para>
                ///         The type <see cref="Emik.SourceGenerators.Choices.Tests.SuperTask"/>
                ///         is a disjoint union representing the following variants:
                ///     </para>
                ///     <list type="table">
                ///         <listheader>
                ///             <term>
                ///                 <c>Name</c> <see langword="as"/> <c>Type</c>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             Predicate
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             Factory
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </listheader>
                ///         <item>
                ///             <term>
                ///                 <see cref="Left"/> <see langword="as"/> <see cref="System.Threading.Tasks.Task"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsLeft"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <see cref="OfLeft(System.Threading.Tasks.Task)"/>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="Right"/> <see langword="as"/> <see cref="System.Threading.Tasks.Task"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsRight"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <see cref="OfRight(System.Threading.Tasks.Task)"/>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///     </list>
                /// </remarks>
                partial record SuperTask :
                    global::System.IComparable,
                    global::System.IComparable<object>,
                    global::System.IComparable<global::Emik.SourceGenerators.Choices.Tests.SuperTask>,
#if NET7_0_OR_GREATER
                    global::System.Numerics.IComparisonOperators<global::Emik.SourceGenerators.Choices.Tests.SuperTask, global::Emik.SourceGenerators.Choices.Tests.SuperTask, bool>,
#endif
                    global::System.IEquatable<object>,
                    global::System.IEquatable<global::Emik.SourceGenerators.Choices.Tests.SuperTask>,
                    System.IAsyncResult,
                    System.IDisposable
                {
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    private byte _discriminator;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    private System.Threading.Tasks.Task? _reference;

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.SuperTask"/> record with the variant <see cref="Left"/> of type <see cref="System.Threading.Tasks.Task"/>.
                    /// </summary>
                    /// <param name="left">The variant.</param>
                    /// <param name="x">The discriminator.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    private SuperTask(System.Threading.Tasks.Task left, byte x)
                    {
                        _discriminator = x;
                        _reference = left;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.SuperTask"/> is the variant <see cref="Left"/> of type <see cref="System.Threading.Tasks.Task"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    public bool IsLeft
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Left")]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(false, "Right")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.SuperTask"/> is the variant <see cref="Right"/> of type <see cref="System.Threading.Tasks.Task"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    public bool IsRight
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Right")]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(false, "Left")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1;
                    }

                    /// <summary>
                    /// Gets the <see cref="System.Threading.Tasks.Task"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    public System.Threading.Tasks.Task? Left
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0 ? (System.Threading.Tasks.Task)_reference! : default;
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        private set
                        {
                            _discriminator = 0;
                            _reference = value;
                        }
                    }

                    /// <summary>
                    /// Gets the <see cref="System.Threading.Tasks.Task"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    public System.Threading.Tasks.Task? Right
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1 ? (System.Threading.Tasks.Task)_reference! : default;
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        private set
                        {
                            _discriminator = 1;
                            _reference = value;
                        }
                    }

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.SuperTask"/> record with the variant <see cref="Left"/> of type <see cref="System.Threading.Tasks.Task"/>.
                    /// </summary>
                    /// <param name="left">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="left"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.SuperTask OfLeft(System.Threading.Tasks.Task left)
                        => new global::Emik.SourceGenerators.Choices.Tests.SuperTask(left, (byte)0);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.SuperTask"/> record with the variant <see cref="Right"/> of type <see cref="System.Threading.Tasks.Task"/>.
                    /// </summary>
                    /// <param name="right">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="right"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.SuperTask OfRight(System.Threading.Tasks.Task right)
                        => new global::Emik.SourceGenerators.Choices.Tests.SuperTask(right, (byte)1);

                    /// <summary>
                    /// Determines whether the left-hand side is greater than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >(Emik.SourceGenerators.Choices.Tests.SuperTask? left, Emik.SourceGenerators.Choices.Tests.SuperTask? right)
                        => left is not null &&
                            (right is null ||
                            left._discriminator > right._discriminator ||
                            left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => global::System.Collections.Generic.Comparer<System.Threading.Tasks.Task>.Default.Compare(((System.Threading.Tasks.Task)left._reference!), ((System.Threading.Tasks.Task)right._reference!)) > 0,
                                _ => global::System.Collections.Generic.Comparer<System.Threading.Tasks.Task>.Default.Compare(((System.Threading.Tasks.Task)left._reference!), ((System.Threading.Tasks.Task)right._reference!)) > 0,
                            });

                    /// <summary>
                    /// Determines whether the left-hand side is greater than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >=(Emik.SourceGenerators.Choices.Tests.SuperTask? left, Emik.SourceGenerators.Choices.Tests.SuperTask? right)
                        => left == right || left > right;

                    /// <summary>
                    /// Determines whether the left-hand side is less than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <(Emik.SourceGenerators.Choices.Tests.SuperTask? left, Emik.SourceGenerators.Choices.Tests.SuperTask? right)
                        => right > left;

                    /// <summary>
                    /// Determines whether the left-hand side is less than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <=(Emik.SourceGenerators.Choices.Tests.SuperTask? left, Emik.SourceGenerators.Choices.Tests.SuperTask? right)
                        => right >= left;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public virtual bool Equals(Emik.SourceGenerators.Choices.Tests.SuperTask? other)
                        => this == other;

                    /// <inheritdoc cref="IComparable.CompareTo(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int CompareTo(object? obj)
                        => obj is null ? 1 : obj is global::Emik.SourceGenerators.Choices.Tests.SuperTask x ? CompareTo(x) : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int CompareTo(Emik.SourceGenerators.Choices.Tests.SuperTask? other)
                        => other is null ? 1 : Equals(other) ? 0 : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override int GetHashCode()
                        => unchecked(_discriminator * 16361) ^
                        (_discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).GetHashCode(),
                            _ => ((System.Threading.Tasks.Task)_reference!).GetHashCode(),
                        });

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override string ToString()
                        => _discriminator switch
                        {
                            0 => $"{nameof(Left)}({((System.Threading.Tasks.Task)_reference!)})",
                            _ => $"{nameof(Right)}({((System.Threading.Tasks.Task)_reference!)})",
                        };

                    /// <summary>
                    /// Invokes the callback based on current variance.
                    /// </summary>
                    /// <param name="onLeft">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.SuperTask"/> record with the variant <see cref="Left"/> of type <see cref="System.Threading.Tasks.Task"/> is held.</param>
                    /// <param name="onRight">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.SuperTask"/> record with the variant <see cref="Right"/> of type <see cref="System.Threading.Tasks.Task"/> is held.</param>
                    /// <returns>Itself.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public Emik.SourceGenerators.Choices.Tests.SuperTask? Map(
                        global::System.Action<System.Threading.Tasks.Task>? onLeft = null,
                        global::System.Action<System.Threading.Tasks.Task>? onRight = null
                    )
                    {
                        switch (_discriminator)
                        {
                            case 0:
                                onLeft?.Invoke(((System.Threading.Tasks.Task)_reference!));
                                return this;
                            default:
                                onRight?.Invoke(((System.Threading.Tasks.Task)_reference!));
                                return this;
                        }
                    }

                    /// <summary>
                    /// Maps each variant to <typeparamref name="TMappingResult"/>.
                    /// </summary>
                    /// <typeparam name="TMappingResult">The resulting type from the mapping.</typeparam>
                    /// <param name="onLeft">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.SuperTask"/> record with the variant <see cref="Left"/> of type <see cref="System.Threading.Tasks.Task"/> is held.</param>
                    /// <param name="onRight">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.SuperTask"/> record with the variant <see cref="Right"/> of type <see cref="System.Threading.Tasks.Task"/> is held.</param>
                    /// <returns>
                    /// The resulting value from one of the parameters based on the current state of the object.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public TMappingResult Map<TMappingResult>(
                        global::System.Func<System.Threading.Tasks.Task, TMappingResult> onLeft,
                        global::System.Func<System.Threading.Tasks.Task, TMappingResult> onRight
                    )
                        => _discriminator switch
                        {
                            0 => onLeft(((System.Threading.Tasks.Task)_reference!)),
                            _ => onRight(((System.Threading.Tasks.Task)_reference!)),
                        };

                    /// <summary>
                    /// Gets the underlying value.
                    /// </summary>
                    /// <returns>
                    /// The underlying value from this instance.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task GetUnderlyingValue()
                        => (System.Threading.Tasks.Task)_reference!;

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ConfigureAwait(bool)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ConfigureAwait(continueOnCapturedContext),
                            _ => ((System.Threading.Tasks.Task)_reference!).ConfigureAwait(continueOnCapturedContext),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ConfigureAwait(System.Threading.Tasks.ConfigureAwaitOptions)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait(global::System.Threading.Tasks.ConfigureAwaitOptions options)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ConfigureAwait(options),
                            _ => ((System.Threading.Tasks.Task)_reference!).ConfigureAwait(options),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task, object?}, object?)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task ContinueWith(global::System.Action<global::System.Threading.Tasks.Task, object?> continuationAction, object? state)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction, state),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction, state),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task, object?}, object?, System.Threading.CancellationToken)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task ContinueWith(global::System.Action<global::System.Threading.Tasks.Task, object?> continuationAction, object? state, global::System.Threading.CancellationToken cancellationToken)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction, state, cancellationToken),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction, state, cancellationToken),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task, object?}, object?, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task ContinueWith(global::System.Action<global::System.Threading.Tasks.Task, object?> continuationAction, object? state, global::System.Threading.CancellationToken cancellationToken, global::System.Threading.Tasks.TaskContinuationOptions continuationOptions, global::System.Threading.Tasks.TaskScheduler scheduler)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction, state, cancellationToken, continuationOptions, scheduler),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction, state, cancellationToken, continuationOptions, scheduler),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task, object?}, object?, System.Threading.Tasks.TaskContinuationOptions)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task ContinueWith(global::System.Action<global::System.Threading.Tasks.Task, object?> continuationAction, object? state, global::System.Threading.Tasks.TaskContinuationOptions continuationOptions)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction, state, continuationOptions),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction, state, continuationOptions),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task, object?}, object?, System.Threading.Tasks.TaskScheduler)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task ContinueWith(global::System.Action<global::System.Threading.Tasks.Task, object?> continuationAction, object? state, global::System.Threading.Tasks.TaskScheduler scheduler)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction, state, scheduler),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction, state, scheduler),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task ContinueWith(global::System.Action<global::System.Threading.Tasks.Task> continuationAction)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task}, System.Threading.CancellationToken)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task ContinueWith(global::System.Action<global::System.Threading.Tasks.Task> continuationAction, global::System.Threading.CancellationToken cancellationToken)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction, cancellationToken),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction, cancellationToken),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task}, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task ContinueWith(global::System.Action<global::System.Threading.Tasks.Task> continuationAction, global::System.Threading.CancellationToken cancellationToken, global::System.Threading.Tasks.TaskContinuationOptions continuationOptions, global::System.Threading.Tasks.TaskScheduler scheduler)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction, cancellationToken, continuationOptions, scheduler),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction, cancellationToken, continuationOptions, scheduler),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task}, System.Threading.Tasks.TaskContinuationOptions)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task ContinueWith(global::System.Action<global::System.Threading.Tasks.Task> continuationAction, global::System.Threading.Tasks.TaskContinuationOptions continuationOptions)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction, continuationOptions),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction, continuationOptions),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task}, System.Threading.Tasks.TaskScheduler)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task ContinueWith(global::System.Action<global::System.Threading.Tasks.Task> continuationAction, global::System.Threading.Tasks.TaskScheduler scheduler)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction, scheduler),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith(continuationAction, scheduler),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith{TResult}(System.Func{System.Threading.Tasks.Task, object?, TResult}, object?)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(global::System.Func<global::System.Threading.Tasks.Task, object?, TResult> continuationFunction, object? state)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction, state),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction, state),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith{TResult}(System.Func{System.Threading.Tasks.Task, object?, TResult}, object?, System.Threading.CancellationToken)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(global::System.Func<global::System.Threading.Tasks.Task, object?, TResult> continuationFunction, object? state, global::System.Threading.CancellationToken cancellationToken)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction, state, cancellationToken),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction, state, cancellationToken),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith{TResult}(System.Func{System.Threading.Tasks.Task, object?, TResult}, object?, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(global::System.Func<global::System.Threading.Tasks.Task, object?, TResult> continuationFunction, object? state, global::System.Threading.CancellationToken cancellationToken, global::System.Threading.Tasks.TaskContinuationOptions continuationOptions, global::System.Threading.Tasks.TaskScheduler scheduler)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction, state, cancellationToken, continuationOptions, scheduler),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction, state, cancellationToken, continuationOptions, scheduler),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith{TResult}(System.Func{System.Threading.Tasks.Task, object?, TResult}, object?, System.Threading.Tasks.TaskContinuationOptions)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(global::System.Func<global::System.Threading.Tasks.Task, object?, TResult> continuationFunction, object? state, global::System.Threading.Tasks.TaskContinuationOptions continuationOptions)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction, state, continuationOptions),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction, state, continuationOptions),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith{TResult}(System.Func{System.Threading.Tasks.Task, object?, TResult}, object?, System.Threading.Tasks.TaskScheduler)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(global::System.Func<global::System.Threading.Tasks.Task, object?, TResult> continuationFunction, object? state, global::System.Threading.Tasks.TaskScheduler scheduler)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction, state, scheduler),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction, state, scheduler),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith{TResult}(System.Func{System.Threading.Tasks.Task, TResult})"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(global::System.Func<global::System.Threading.Tasks.Task, TResult> continuationFunction)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith{TResult}(System.Func{System.Threading.Tasks.Task, TResult}, System.Threading.CancellationToken)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(global::System.Func<global::System.Threading.Tasks.Task, TResult> continuationFunction, global::System.Threading.CancellationToken cancellationToken)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction, cancellationToken),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction, cancellationToken),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith{TResult}(System.Func{System.Threading.Tasks.Task, TResult}, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(global::System.Func<global::System.Threading.Tasks.Task, TResult> continuationFunction, global::System.Threading.CancellationToken cancellationToken, global::System.Threading.Tasks.TaskContinuationOptions continuationOptions, global::System.Threading.Tasks.TaskScheduler scheduler)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction, cancellationToken, continuationOptions, scheduler),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction, cancellationToken, continuationOptions, scheduler),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith{TResult}(System.Func{System.Threading.Tasks.Task, TResult}, System.Threading.Tasks.TaskContinuationOptions)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(global::System.Func<global::System.Threading.Tasks.Task, TResult> continuationFunction, global::System.Threading.Tasks.TaskContinuationOptions continuationOptions)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction, continuationOptions),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction, continuationOptions),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.ContinueWith{TResult}(System.Func{System.Threading.Tasks.Task, TResult}, System.Threading.Tasks.TaskScheduler)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(global::System.Func<global::System.Threading.Tasks.Task, TResult> continuationFunction, global::System.Threading.Tasks.TaskScheduler scheduler)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction, scheduler),
                            _ => ((System.Threading.Tasks.Task)_reference!).ContinueWith<TResult>(continuationFunction, scheduler),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.Dispose()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void Dispose()
                    {
                        switch (_discriminator)
                        {
                            case 0:
                                ((System.Threading.Tasks.Task)_reference!).Dispose();
                                break;
                            default:
                                ((System.Threading.Tasks.Task)_reference!).Dispose();
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Threading.Tasks.Task.GetAwaiter()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter()
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).GetAwaiter(),
                            _ => ((System.Threading.Tasks.Task)_reference!).GetAwaiter(),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.RunSynchronously()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void RunSynchronously()
                    {
                        switch (_discriminator)
                        {
                            case 0:
                                ((System.Threading.Tasks.Task)_reference!).RunSynchronously();
                                break;
                            default:
                                ((System.Threading.Tasks.Task)_reference!).RunSynchronously();
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void RunSynchronously(global::System.Threading.Tasks.TaskScheduler scheduler)
                    {
                        switch (_discriminator)
                        {
                            case 0:
                                ((System.Threading.Tasks.Task)_reference!).RunSynchronously(scheduler);
                                break;
                            default:
                                ((System.Threading.Tasks.Task)_reference!).RunSynchronously(scheduler);
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Threading.Tasks.Task.Start()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void Start()
                    {
                        switch (_discriminator)
                        {
                            case 0:
                                ((System.Threading.Tasks.Task)_reference!).Start();
                                break;
                            default:
                                ((System.Threading.Tasks.Task)_reference!).Start();
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void Start(global::System.Threading.Tasks.TaskScheduler scheduler)
                    {
                        switch (_discriminator)
                        {
                            case 0:
                                ((System.Threading.Tasks.Task)_reference!).Start(scheduler);
                                break;
                            default:
                                ((System.Threading.Tasks.Task)_reference!).Start(scheduler);
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Threading.Tasks.Task.Wait()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void Wait()
                    {
                        switch (_discriminator)
                        {
                            case 0:
                                ((System.Threading.Tasks.Task)_reference!).Wait();
                                break;
                            default:
                                ((System.Threading.Tasks.Task)_reference!).Wait();
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Threading.Tasks.Task.Wait(int)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool Wait(int millisecondsTimeout)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).Wait(millisecondsTimeout),
                            _ => ((System.Threading.Tasks.Task)_reference!).Wait(millisecondsTimeout),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.Wait(int, System.Threading.CancellationToken)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool Wait(int millisecondsTimeout, global::System.Threading.CancellationToken cancellationToken)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).Wait(millisecondsTimeout, cancellationToken),
                            _ => ((System.Threading.Tasks.Task)_reference!).Wait(millisecondsTimeout, cancellationToken),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public void Wait(global::System.Threading.CancellationToken cancellationToken)
                    {
                        switch (_discriminator)
                        {
                            case 0:
                                ((System.Threading.Tasks.Task)_reference!).Wait(cancellationToken);
                                break;
                            default:
                                ((System.Threading.Tasks.Task)_reference!).Wait(cancellationToken);
                                break;
                        }
                    }

                    /// <inheritdoc cref="System.Threading.Tasks.Task.Wait(System.TimeSpan)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool Wait(global::System.TimeSpan timeout)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).Wait(timeout),
                            _ => ((System.Threading.Tasks.Task)_reference!).Wait(timeout),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.Wait(System.TimeSpan, System.Threading.CancellationToken)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool Wait(global::System.TimeSpan timeout, global::System.Threading.CancellationToken cancellationToken)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).Wait(timeout, cancellationToken),
                            _ => ((System.Threading.Tasks.Task)_reference!).Wait(timeout, cancellationToken),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.WaitAsync(System.Threading.CancellationToken)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task WaitAsync(global::System.Threading.CancellationToken cancellationToken)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).WaitAsync(cancellationToken),
                            _ => ((System.Threading.Tasks.Task)_reference!).WaitAsync(cancellationToken),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.WaitAsync(System.TimeSpan)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task WaitAsync(global::System.TimeSpan timeout)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).WaitAsync(timeout),
                            _ => ((System.Threading.Tasks.Task)_reference!).WaitAsync(timeout),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.WaitAsync(System.TimeSpan, System.Threading.CancellationToken)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task WaitAsync(global::System.TimeSpan timeout, global::System.Threading.CancellationToken cancellationToken)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).WaitAsync(timeout, cancellationToken),
                            _ => ((System.Threading.Tasks.Task)_reference!).WaitAsync(timeout, cancellationToken),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.WaitAsync(System.TimeSpan, System.TimeProvider)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task WaitAsync(global::System.TimeSpan timeout, global::System.TimeProvider timeProvider)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).WaitAsync(timeout, timeProvider),
                            _ => ((System.Threading.Tasks.Task)_reference!).WaitAsync(timeout, timeProvider),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.WaitAsync(System.TimeSpan, System.TimeProvider, System.Threading.CancellationToken)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Threading.Tasks.Task WaitAsync(global::System.TimeSpan timeout, global::System.TimeProvider timeProvider, global::System.Threading.CancellationToken cancellationToken)
                        => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).WaitAsync(timeout, timeProvider, cancellationToken),
                            _ => ((System.Threading.Tasks.Task)_reference!).WaitAsync(timeout, timeProvider, cancellationToken),
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.AsyncState"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    public object? AsyncState
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).AsyncState,
                            _ => ((System.Threading.Tasks.Task)_reference!).AsyncState,
                        };
                    }

                    /// <inheritdoc cref="System.Threading.Tasks.Task.CreationOptions"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    public System.Threading.Tasks.TaskCreationOptions CreationOptions
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).CreationOptions,
                            _ => ((System.Threading.Tasks.Task)_reference!).CreationOptions,
                        };
                    }

                    /// <inheritdoc cref="System.Threading.Tasks.Task.Exception"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    public System.AggregateException? Exception
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).Exception,
                            _ => ((System.Threading.Tasks.Task)_reference!).Exception,
                        };
                    }

                    /// <inheritdoc cref="System.Threading.Tasks.Task.Id"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    public int Id
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).Id,
                            _ => ((System.Threading.Tasks.Task)_reference!).Id,
                        };
                    }

                    /// <inheritdoc cref="System.Threading.Tasks.Task.IsCanceled"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    public bool IsCanceled
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).IsCanceled,
                            _ => ((System.Threading.Tasks.Task)_reference!).IsCanceled,
                        };
                    }

                    /// <inheritdoc cref="System.Threading.Tasks.Task.IsCompleted"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    public bool IsCompleted
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).IsCompleted,
                            _ => ((System.Threading.Tasks.Task)_reference!).IsCompleted,
                        };
                    }

                    /// <inheritdoc cref="System.Threading.Tasks.Task.IsCompletedSuccessfully"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    public bool IsCompletedSuccessfully
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).IsCompletedSuccessfully,
                            _ => ((System.Threading.Tasks.Task)_reference!).IsCompletedSuccessfully,
                        };
                    }

                    /// <inheritdoc cref="System.Threading.Tasks.Task.IsFaulted"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    [System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Exception")]
                    public bool IsFaulted
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).IsFaulted,
                            _ => ((System.Threading.Tasks.Task)_reference!).IsFaulted,
                        };
                    }

                    /// <inheritdoc cref="System.Threading.Tasks.Task.Status"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    public System.Threading.Tasks.TaskStatus Status
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator switch
                        {
                            0 => ((System.Threading.Tasks.Task)_reference!).Status,
                            _ => ((System.Threading.Tasks.Task)_reference!).Status,
                        };
                    }

                    /// <inheritdoc cref="System.IAsyncResult.AsyncWaitHandle"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    public System.Threading.WaitHandle AsyncWaitHandle
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator switch
                        {
                            0 => ((System.IAsyncResult)_reference!).AsyncWaitHandle,
                            _ => ((System.IAsyncResult)_reference!).AsyncWaitHandle,
                        };
                    }

                    /// <inheritdoc cref="System.IAsyncResult.CompletedSynchronously"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.4.0")]
                    public bool CompletedSynchronously
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator switch
                        {
                            0 => ((System.IAsyncResult)_reference!).CompletedSynchronously,
                            _ => ((System.IAsyncResult)_reference!).CompletedSynchronously,
                        };
                    }
                }
            }
        }
    }
}

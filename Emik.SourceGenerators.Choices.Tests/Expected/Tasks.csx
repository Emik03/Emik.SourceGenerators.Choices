// <auto-generated/>
// ReSharper disable RedundantNameQualifier
// ReSharper disable once CheckNamespace
#nullable enable
#pragma warning disable
namespace Emik
{
    namespace SourceGenerators
    {
        namespace Choices
        {
            namespace Tests
            {
                /// <inheritdoc cref="Emik.SourceGenerators.Choices.Tests.Tasks"/>
                /// <remarks>
                ///     <para>
                ///         The type <see cref="Emik.SourceGenerators.Choices.Tests.Tasks"/>
                ///         is a mutable disjoint union representing the following variants:
                ///     </para>
                ///     <list type="table">
                ///         <listheader>
                ///             <term>
                ///                 <c>Name</c> <see langword="as"/> <c>Type</c>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             Predicate
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             Factories
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </listheader>
                ///         <item>
                ///             <term>
                ///                 <see cref="Referenced"/> <see langword="as"/> <see cref="System.Threading.Tasks.Task"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsReferenced"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfReferenced(System.Threading.Tasks.Task)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.Tasks(System.Threading.Tasks.Task)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(System.Threading.Tasks.Task)"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="Valued"/> <see langword="as"/> <see cref="System.Threading.Tasks.ValueTask"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsValued"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfValued(System.Threading.Tasks.ValueTask)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.Tasks(System.Threading.Tasks.ValueTask)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(System.Threading.Tasks.ValueTask)"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///     </list>
                /// </remarks>
                [global::System.Runtime.InteropServices.StructLayoutAttribute(global::System.Runtime.InteropServices.LayoutKind.Auto)]
                partial struct Tasks :
                    global::System.IComparable,
                    global::System.IComparable<object>,
                    global::System.IComparable<global::Emik.SourceGenerators.Choices.Tests.Tasks>,
#if NET7_0_OR_GREATER
                    global::System.Numerics.IComparisonOperators<global::Emik.SourceGenerators.Choices.Tests.Tasks, global::Emik.SourceGenerators.Choices.Tests.Tasks, bool>,
#endif
                    global::System.IEquatable<object>,
                    global::System.IEquatable<global::Emik.SourceGenerators.Choices.Tests.Tasks>
                {
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    private byte _discriminator;

                    private System.Threading.Tasks.Task? _referenced;

                    private System.Threading.Tasks.ValueTask _valued;

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Tasks"/> struct with the variant <see cref="Referenced"/> of type <see cref="System.Threading.Tasks.Task"/>.
                    /// </summary>
                    /// <param name="referenced">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public Tasks(System.Threading.Tasks.Task referenced)
                    {
                        _discriminator = 0;
                        _referenced = referenced;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Tasks"/> struct with the variant <see cref="Valued"/> of type <see cref="System.Threading.Tasks.ValueTask"/>.
                    /// </summary>
                    /// <param name="valued">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public Tasks(System.Threading.Tasks.ValueTask valued)
                    {
                        _discriminator = 1;
                        _valued = valued;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.Tasks"/> is the variant <see cref="Referenced"/> of type <see cref="System.Threading.Tasks.Task"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    public readonly bool IsReferenced
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Referenced")]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(false, "Valued")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.Tasks"/> is the variant <see cref="Valued"/> of type <see cref="System.Threading.Tasks.ValueTask"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    public readonly bool IsValued
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Valued")]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(false, "Referenced")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1;
                    }

                    /// <summary>
                    /// Gets or sets the <see cref="System.Threading.Tasks.Task"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    public System.Threading.Tasks.Task? Referenced
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        readonly get => _discriminator is 0 ? _referenced : default;
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        set
                        {
                            _discriminator = 0;
                            _referenced = value;
                        }
                    }

                    /// <summary>
                    /// Gets or sets the <see cref="System.Threading.Tasks.ValueTask"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    public System.Threading.Tasks.ValueTask Valued
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        readonly get => _discriminator is 1 ? _valued : default;
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        set
                        {
                            _discriminator = 1;
                            _valued = value;
                        }
                    }

                    /// <summary>
                    /// Implicitly converts the <see cref="System.Threading.Tasks.Task"/> parameter to the union.
                    /// </summary>
                    /// <param name="referenced">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="referenced"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static implicit operator global::Emik.SourceGenerators.Choices.Tests.Tasks(System.Threading.Tasks.Task referenced)
                        => new global::Emik.SourceGenerators.Choices.Tests.Tasks(referenced);

                    /// <summary>
                    /// Explicitly converts the union to the target type <see cref="System.Threading.Tasks.Task"/>.
                    /// </summary>
                    /// <param name="x">The union to access its property.</param>
                    /// <returns>The getter of the union <paramref name="x"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static explicit operator System.Threading.Tasks.Task?(global::Emik.SourceGenerators.Choices.Tests.Tasks x)
                        => x.Referenced;

                    /// <summary>
                    /// Implicitly converts the <see cref="System.Threading.Tasks.ValueTask"/> parameter to the union.
                    /// </summary>
                    /// <param name="valued">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="valued"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static implicit operator global::Emik.SourceGenerators.Choices.Tests.Tasks(System.Threading.Tasks.ValueTask valued)
                        => new global::Emik.SourceGenerators.Choices.Tests.Tasks(valued);

                    /// <summary>
                    /// Explicitly converts the union to the target type <see cref="System.Threading.Tasks.ValueTask"/>.
                    /// </summary>
                    /// <param name="x">The union to access its property.</param>
                    /// <returns>The getter of the union <paramref name="x"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static explicit operator System.Threading.Tasks.ValueTask(global::Emik.SourceGenerators.Choices.Tests.Tasks x)
                        => x.Valued;

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Tasks"/> struct with the variant <see cref="Referenced"/> of type <see cref="System.Threading.Tasks.Task"/>.
                    /// </summary>
                    /// <param name="referenced">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="referenced"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.Tasks OfReferenced(System.Threading.Tasks.Task referenced)
                        => new global::Emik.SourceGenerators.Choices.Tests.Tasks(referenced);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.Tasks"/> struct with the variant <see cref="Valued"/> of type <see cref="System.Threading.Tasks.ValueTask"/>.
                    /// </summary>
                    /// <param name="valued">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="valued"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.Tasks OfValued(System.Threading.Tasks.ValueTask valued)
                        => new global::Emik.SourceGenerators.Choices.Tests.Tasks(valued);

                    /// <summary>
                    /// Determines whether the left-hand side is equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator ==(Emik.SourceGenerators.Choices.Tests.Tasks left, Emik.SourceGenerators.Choices.Tests.Tasks right)
                        => left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => global::System.Collections.Generic.EqualityComparer<System.Threading.Tasks.Task>.Default.Equals(left._referenced!, right._referenced!),
                                _ => left._valued.Equals(right._valued),
                            };

                    /// <summary>
                    /// Determines whether the left-hand side is unequal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is unequal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator !=(Emik.SourceGenerators.Choices.Tests.Tasks left, Emik.SourceGenerators.Choices.Tests.Tasks right)
                        => !(left == right);

                    /// <summary>
                    /// Determines whether the left-hand side is greater than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >(Emik.SourceGenerators.Choices.Tests.Tasks left, Emik.SourceGenerators.Choices.Tests.Tasks right)
                        => left._discriminator > right._discriminator ||
                            left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => global::System.Collections.Generic.Comparer<System.Threading.Tasks.Task>.Default.Compare(left._referenced!, right._referenced!) > 0,
                                _ => global::System.Collections.Generic.Comparer<System.Threading.Tasks.ValueTask>.Default.Compare(left._valued, right._valued) > 0,
                            };

                    /// <summary>
                    /// Determines whether the left-hand side is greater than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >=(Emik.SourceGenerators.Choices.Tests.Tasks left, Emik.SourceGenerators.Choices.Tests.Tasks right)
                        => left == right || left > right;

                    /// <summary>
                    /// Determines whether the left-hand side is less than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <(Emik.SourceGenerators.Choices.Tests.Tasks left, Emik.SourceGenerators.Choices.Tests.Tasks right)
                        => right > left;

                    /// <summary>
                    /// Determines whether the left-hand side is less than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <=(Emik.SourceGenerators.Choices.Tests.Tasks left, Emik.SourceGenerators.Choices.Tests.Tasks right)
                        => right >= left;

                    /// <inheritdoc cref="object.Equals(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override bool Equals(object? obj)
                        => obj is global::Emik.SourceGenerators.Choices.Tests.Tasks x && Equals(x);

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly bool Equals(Emik.SourceGenerators.Choices.Tests.Tasks other)
                        => this == other;

                    /// <inheritdoc cref="IComparable.CompareTo(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly int CompareTo(object? obj)
                        => obj is null ? 1 : obj is global::Emik.SourceGenerators.Choices.Tests.Tasks x ? CompareTo(x) : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly int CompareTo(Emik.SourceGenerators.Choices.Tests.Tasks other)
                        => Equals(other) ? 0 : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly override int GetHashCode()
                        => unchecked(_discriminator * 24049) ^
                        (_discriminator switch
                        {
                            0 => _referenced!.GetHashCode(),
                            _ => _valued.GetHashCode(),
                        });

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly override string ToString()
                        => _discriminator switch
                        {
                            0 => $"{nameof(Referenced)}({_referenced!})",
                            _ => $"{nameof(Valued)}({_valued})",
                        };

                    /// <summary>
                    /// Invokes the callback based on current variance.
                    /// </summary>
                    /// <param name="onReferenced">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Tasks"/> struct with the variant <see cref="Referenced"/> of type <see cref="System.Threading.Tasks.Task"/> is held.</param>
                    /// <param name="onValued">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Tasks"/> struct with the variant <see cref="Valued"/> of type <see cref="System.Threading.Tasks.ValueTask"/> is held.</param>
                    /// <returns>Itself.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly Emik.SourceGenerators.Choices.Tests.Tasks Map(
                        global::System.Action<System.Threading.Tasks.Task>? onReferenced = null,
                        global::System.Action<System.Threading.Tasks.ValueTask>? onValued = null
                    )
                    {
                        switch (_discriminator)
                        {
                            case 0:
                                onReferenced?.Invoke(_referenced!);
                                return this;
                            default:
                                onValued?.Invoke(_valued);
                                return this;
                        }
                    }

                    /// <summary>
                    /// Maps each variant to <typeparamref name="TMappingResult"/>.
                    /// </summary>
                    /// <typeparam name="TMappingResult">The resulting type from the mapping.</typeparam>
                    /// <param name="onReferenced">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Tasks"/> struct with the variant <see cref="Referenced"/> of type <see cref="System.Threading.Tasks.Task"/> is held.</param>
                    /// <param name="onValued">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.Tasks"/> struct with the variant <see cref="Valued"/> of type <see cref="System.Threading.Tasks.ValueTask"/> is held.</param>
                    /// <returns>
                    /// The resulting value from one of the parameters based on the current state of the object.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly TMappingResult Map<TMappingResult>(
                        global::System.Func<System.Threading.Tasks.Task, TMappingResult> onReferenced,
                        global::System.Func<System.Threading.Tasks.ValueTask, TMappingResult> onValued
                    )
                        => _discriminator switch
                        {
                            0 => onReferenced(_referenced!),
                            _ => onValued(_valued),
                        };

                    /// <summary>
                    /// Gets the underlying value.
                    /// </summary>
                    /// <returns>
                    /// The underlying value from this instance.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly object GetUnderlyingValue()
                        => _discriminator switch
                        {
                            0 => _referenced!,
                            _ => _valued,
                        };

                    /// <inheritdoc cref="System.Threading.Tasks.Task.IsCanceled"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    public readonly bool IsCanceled
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator switch
                        {
                            0 => _referenced!.IsCanceled,
                            _ => _valued.IsCanceled,
                        };
                    }

                    /// <inheritdoc cref="System.Threading.Tasks.Task.IsCompleted"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    public readonly bool IsCompleted
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator switch
                        {
                            0 => _referenced!.IsCompleted,
                            _ => _valued.IsCompleted,
                        };
                    }

                    /// <inheritdoc cref="System.Threading.Tasks.Task.IsCompletedSuccessfully"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    public readonly bool IsCompletedSuccessfully
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator switch
                        {
                            0 => _referenced!.IsCompletedSuccessfully,
                            _ => _valued.IsCompletedSuccessfully,
                        };
                    }

                    /// <inheritdoc cref="System.Threading.Tasks.Task.IsFaulted"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Exception")]
                    public readonly bool IsFaulted
                    {
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator switch
                        {
                            0 => _referenced!.IsFaulted,
                            _ => _valued.IsFaulted,
                        };
                    }

                    /// <inheritdoc cref="object.GetType()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.10.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Type GetUnderlyingType()
                        => _discriminator switch
                        {
                            0 => _referenced!.GetType(),
                            _ => typeof(System.Threading.Tasks.ValueTask),
                        };
                }
            }
        }
    }
}

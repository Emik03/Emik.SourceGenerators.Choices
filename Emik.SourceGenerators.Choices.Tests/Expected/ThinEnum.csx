// <auto-generated/>
// ReSharper disable RedundantNameQualifier
// ReSharper disable once CheckNamespace
#nullable enable
#pragma warning disable
namespace Emik
{
    namespace SourceGenerators
    {
        namespace Choices
        {
            namespace Tests
            {
                /// <inheritdoc cref="Emik.SourceGenerators.Choices.Tests.ThinEnum"/>
                /// <remarks>
                ///     <para>
                ///         The type <see cref="Emik.SourceGenerators.Choices.Tests.ThinEnum"/>
                ///         is an immutable disjoint union representing the following variants:
                ///     </para>
                ///     <list type="table">
                ///         <listheader>
                ///             <term>
                ///                 <c>Name</c> <see langword="as"/> <c>Type</c>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             Predicate
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             Factory
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </listheader>
                ///         <item>
                ///             <term>
                ///                 <c>Maybe</c> <see langword="as"/> <see cref="System.ValueTuple"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsMaybe"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <see cref="OfMaybe(System.ValueTuple)"/>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <c>False</c> <see langword="as"/> <see cref="System.ValueTuple"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsFalse"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <see cref="OfFalse(System.ValueTuple)"/>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <c>Null</c> <see langword="as"/> <see cref="System.ValueTuple"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsNull"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <see cref="OfNull(System.ValueTuple)"/>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <c>True</c> <see langword="as"/> <see cref="System.ValueTuple"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsTrue"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <see cref="OfTrue(System.ValueTuple)"/>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///     </list>
                /// </remarks>
                [global::System.Runtime.InteropServices.StructLayoutAttribute(global::System.Runtime.InteropServices.LayoutKind.Auto)]
                partial struct ThinEnum :
                    global::System.IComparable,
                    global::System.IComparable<object>,
                    global::System.IComparable<global::Emik.SourceGenerators.Choices.Tests.ThinEnum>,
#if NET7_0_OR_GREATER
                    global::System.Numerics.IComparisonOperators<global::Emik.SourceGenerators.Choices.Tests.ThinEnum, global::Emik.SourceGenerators.Choices.Tests.ThinEnum, bool>,
#endif
                    global::System.IEquatable<object>,
                    global::System.IEquatable<global::Emik.SourceGenerators.Choices.Tests.ThinEnum>
                {
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                    private static class Choice
                    {
                        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                        internal static class Maybe<TMaybeDiscard>
                        {
                            [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                            internal static class False
                            {
                                [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                                internal static class Null<TNullDiscard>
                                {
                                    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                                    internal sealed class True : global::System.Attribute
                                    {
                                    }
                                }
                            }
                        }
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    private readonly byte _discriminator;

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.ThinEnum"/> struct with the variant <c>Maybe</c> of type <see cref="System.ValueTuple"/>.
                    /// </summary>
                    /// <param name="maybe">The variant.</param>
                    /// <param name="x">The discriminator.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    private ThinEnum(System.ValueTuple maybe, byte x)
                    {
                        _discriminator = x;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.ThinEnum"/> is the variant <c>Maybe</c> of type <see cref="System.ValueTuple"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    public readonly bool IsMaybe
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.ThinEnum"/> is the variant <c>False</c> of type <see cref="System.ValueTuple"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    public readonly bool IsFalse
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.ThinEnum"/> is the variant <c>Null</c> of type <see cref="System.ValueTuple"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    public readonly bool IsNull
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 2;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.ThinEnum"/> is the variant <c>True</c> of type <see cref="System.ValueTuple"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    public readonly bool IsTrue
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 3;
                    }

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.ThinEnum"/> struct with the variant <c>Maybe</c> of type <see cref="System.ValueTuple"/>.
                    /// </summary>
                    /// <param name="maybe">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="maybe"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.ThinEnum OfMaybe(System.ValueTuple maybe = default)
                        => new global::Emik.SourceGenerators.Choices.Tests.ThinEnum(maybe, (byte)0);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.ThinEnum"/> struct with the variant <c>False</c> of type <see cref="System.ValueTuple"/>.
                    /// </summary>
                    /// <param name="@false">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="@false"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.ThinEnum OfFalse(System.ValueTuple @false = default)
                        => new global::Emik.SourceGenerators.Choices.Tests.ThinEnum(@false, (byte)1);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.ThinEnum"/> struct with the variant <c>Null</c> of type <see cref="System.ValueTuple"/>.
                    /// </summary>
                    /// <param name="@null">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="@null"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.ThinEnum OfNull(System.ValueTuple @null = default)
                        => new global::Emik.SourceGenerators.Choices.Tests.ThinEnum(@null, (byte)2);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.ThinEnum"/> struct with the variant <c>True</c> of type <see cref="System.ValueTuple"/>.
                    /// </summary>
                    /// <param name="@true">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="@true"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.ThinEnum OfTrue(System.ValueTuple @true = default)
                        => new global::Emik.SourceGenerators.Choices.Tests.ThinEnum(@true, (byte)3);

                    /// <summary>
                    /// Determines whether the left-hand side is equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator ==(Emik.SourceGenerators.Choices.Tests.ThinEnum left, Emik.SourceGenerators.Choices.Tests.ThinEnum right)
                        => left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => true,
                                1 => true,
                                2 => true,
                                _ => true,
                            };

                    /// <summary>
                    /// Determines whether the left-hand side is unequal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is unequal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator !=(Emik.SourceGenerators.Choices.Tests.ThinEnum left, Emik.SourceGenerators.Choices.Tests.ThinEnum right)
                        => !(left == right);

                    /// <summary>
                    /// Determines whether the left-hand side is greater than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >(Emik.SourceGenerators.Choices.Tests.ThinEnum left, Emik.SourceGenerators.Choices.Tests.ThinEnum right)
                        => left._discriminator > right._discriminator ||
                            left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => true,
                                1 => true,
                                2 => true,
                                _ => true,
                            };

                    /// <summary>
                    /// Determines whether the left-hand side is greater than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >=(Emik.SourceGenerators.Choices.Tests.ThinEnum left, Emik.SourceGenerators.Choices.Tests.ThinEnum right)
                        => left == right || left > right;

                    /// <summary>
                    /// Determines whether the left-hand side is less than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <(Emik.SourceGenerators.Choices.Tests.ThinEnum left, Emik.SourceGenerators.Choices.Tests.ThinEnum right)
                        => right > left;

                    /// <summary>
                    /// Determines whether the left-hand side is less than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <=(Emik.SourceGenerators.Choices.Tests.ThinEnum left, Emik.SourceGenerators.Choices.Tests.ThinEnum right)
                        => right >= left;

                    /// <inheritdoc cref="object.Equals(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override bool Equals(object? obj)
                        => obj is global::Emik.SourceGenerators.Choices.Tests.ThinEnum x && Equals(x);

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly bool Equals(Emik.SourceGenerators.Choices.Tests.ThinEnum other)
                        => this == other;

                    /// <inheritdoc cref="IComparable.CompareTo(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly int CompareTo(object? obj)
                        => obj is null ? 1 : obj is global::Emik.SourceGenerators.Choices.Tests.ThinEnum x ? CompareTo(x) : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly int CompareTo(Emik.SourceGenerators.Choices.Tests.ThinEnum other)
                        => Equals(other) ? 0 : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly override int GetHashCode()
                        => unchecked(_discriminator * 3049) ^
                        (_discriminator switch
                        {
                            0 => 0,
                            1 => 0,
                            2 => 0,
                            _ => 0,
                        });

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly override string ToString()
                        => _discriminator switch
                        {
                            0 => "Maybe",
                            1 => "False",
                            2 => "Null",
                            _ => "True",
                        };

                    /// <summary>
                    /// Invokes the callback based on current variance.
                    /// </summary>
                    /// <param name="onMaybe">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.ThinEnum"/> struct with the variant <c>Maybe</c> of type <see cref="System.ValueTuple"/> is held.</param>
                    /// <param name="onFalse">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.ThinEnum"/> struct with the variant <c>False</c> of type <see cref="System.ValueTuple"/> is held.</param>
                    /// <param name="onNull">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.ThinEnum"/> struct with the variant <c>Null</c> of type <see cref="System.ValueTuple"/> is held.</param>
                    /// <param name="onTrue">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.ThinEnum"/> struct with the variant <c>True</c> of type <see cref="System.ValueTuple"/> is held.</param>
                    /// <returns>Itself.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly Emik.SourceGenerators.Choices.Tests.ThinEnum Map(
                        global::System.Action? onMaybe = null,
                        global::System.Action? onFalse = null,
                        global::System.Action? onNull = null,
                        global::System.Action? onTrue = null
                    )
                    {
                        switch (_discriminator)
                        {
                            case 0:
                                onMaybe?.Invoke();
                                return this;
                            case 1:
                                onFalse?.Invoke();
                                return this;
                            case 2:
                                onNull?.Invoke();
                                return this;
                            default:
                                onTrue?.Invoke();
                                return this;
                        }
                    }

                    /// <summary>
                    /// Maps each variant to <typeparamref name="TMappingResult"/>.
                    /// </summary>
                    /// <typeparam name="TMappingResult">The resulting type from the mapping.</typeparam>
                    /// <param name="onMaybe">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.ThinEnum"/> struct with the variant <c>Maybe</c> of type <see cref="System.ValueTuple"/> is held.</param>
                    /// <param name="onFalse">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.ThinEnum"/> struct with the variant <c>False</c> of type <see cref="System.ValueTuple"/> is held.</param>
                    /// <param name="onNull">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.ThinEnum"/> struct with the variant <c>Null</c> of type <see cref="System.ValueTuple"/> is held.</param>
                    /// <param name="onTrue">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.ThinEnum"/> struct with the variant <c>True</c> of type <see cref="System.ValueTuple"/> is held.</param>
                    /// <returns>
                    /// The resulting value from one of the parameters based on the current state of the object.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly TMappingResult Map<TMappingResult>(
                        global::System.Func<TMappingResult> onMaybe,
                        global::System.Func<TMappingResult> onFalse,
                        global::System.Func<TMappingResult> onNull,
                        global::System.Func<TMappingResult> onTrue
                    )
                        => _discriminator switch
                        {
                            0 => onMaybe(),
                            1 => onFalse(),
                            2 => onNull(),
                            _ => onTrue(),
                        };

                    /// <summary>
                    /// Gets the underlying value.
                    /// </summary>
                    /// <returns>
                    /// The underlying value from this instance.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly System.ValueTuple GetUnderlyingValue()
                        => _discriminator switch
                        {
                            0 => default(System.ValueTuple),
                            1 => default(System.ValueTuple),
                            2 => default(System.ValueTuple),
                            _ => default(System.ValueTuple),
                        };
                }
            }
        }
    }
}

// <auto-generated/>
// ReSharper disable RedundantNameQualifier
// ReSharper disable once CheckNamespace
#nullable enable
#pragma warning disable
namespace Emik
{
    namespace SourceGenerators
    {
        namespace Choices
        {
            namespace Tests
            {
                /// <inheritdoc cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/>
                /// <remarks>
                ///     <para>
                ///         The type <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/>
                ///         is a mutable disjoint union representing the following variants:
                ///     </para>
                ///     <list type="table">
                ///         <listheader>
                ///             <term>
                ///                 <c>Name</c> <see langword="as"/> <c>Type</c>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             Predicate
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             Factories
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </listheader>
                ///         <item>
                ///             <term>
                ///                 <see cref="Unary"/> <see langword="as"/> <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsUnary"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <see cref="OfUnary(Emik.SourceGenerators.Choices.Tests.TuplePacking)"/>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="Binary"/> <see langword="as"/> <see cref="System.ValueTuple{TuplePacking, TuplePacking}"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsBinary"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfBinary(System.ValueTuple{TuplePacking, TuplePacking})"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking(System.ValueTuple{TuplePacking, TuplePacking})"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(System.ValueTuple{TuplePacking, TuplePacking})"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///     </list>
                /// </remarks>
                partial class TuplePacking :
                    global::System.IComparable,
                    global::System.IComparable<object>,
                    global::System.IComparable<global::Emik.SourceGenerators.Choices.Tests.TuplePacking>,
#if NET7_0_OR_GREATER
                    global::System.Numerics.IComparisonOperators<global::Emik.SourceGenerators.Choices.Tests.TuplePacking, global::Emik.SourceGenerators.Choices.Tests.TuplePacking, bool>,
#endif
                    global::System.IEquatable<object>,
                    global::System.IEquatable<global::Emik.SourceGenerators.Choices.Tests.TuplePacking>
                {
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                    private static class Choice
                    {
                        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                        internal static class Public
                        {
                            [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                            internal static class Unary<TUnaryDiscard>
                            {
                                [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                                internal sealed class Binary<TBinaryDiscard> : global::System.Attribute
                                {
                                }
                            }
                        }
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    private byte _discriminator;

                    private (Emik.SourceGenerators.Choices.Tests.TuplePacking, Emik.SourceGenerators.Choices.Tests.TuplePacking) _binary;

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/> class with the variant <see cref="Unary"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/>.
                    /// </summary>
                    /// <param name="unary">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public TuplePacking(Emik.SourceGenerators.Choices.Tests.TuplePacking unary)
                    {
                        _discriminator = 0;
                        _binary.Item1 = unary;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/> class with the variant <see cref="Binary"/> of type <see cref="System.ValueTuple{TuplePacking, TuplePacking}"/>.
                    /// </summary>
                    /// <param name="binary">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public TuplePacking((Emik.SourceGenerators.Choices.Tests.TuplePacking, Emik.SourceGenerators.Choices.Tests.TuplePacking) binary)
                    {
                        _discriminator = 1;
                        _binary = binary;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/> class with the variant <see cref="Binary"/> of type <see cref="System.ValueTuple{TuplePacking, TuplePacking}"/>.
                    /// </summary>
                    /// <param name="item1">The item1 item within the variant.</param>
                    /// <param name="item2">The item2 item within the variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public TuplePacking(Emik.SourceGenerators.Choices.Tests.TuplePacking item1, Emik.SourceGenerators.Choices.Tests.TuplePacking item2)
                        : this(global::System.ValueTuple.Create(item1, item2)) { }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/> is the variant <see cref="Unary"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    public bool IsUnary
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Unary")]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(false, "Binary")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/> is the variant <see cref="Binary"/> of type <see cref="System.ValueTuple{TuplePacking, TuplePacking}"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    public bool IsBinary
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Binary")]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(false, "Unary")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1;
                    }

                    /// <summary>
                    /// Gets or sets the <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    public Emik.SourceGenerators.Choices.Tests.TuplePacking? Unary
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0 ? _binary.Item1 : default;
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        set
                        {
                            _discriminator = 0;
                            _binary.Item1 = value;
                        }
                    }

                    /// <summary>
                    /// Gets or sets the <see cref="System.ValueTuple{TuplePacking, TuplePacking}"/> variant.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    public (Emik.SourceGenerators.Choices.Tests.TuplePacking, Emik.SourceGenerators.Choices.Tests.TuplePacking) Binary
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1 ? _binary : default;
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        set
                        {
                            _discriminator = 1;
                            _binary = value;
                        }
                    }

                    /// <summary>
                    /// Implicitly converts the <see cref="System.ValueTuple{TuplePacking, TuplePacking}"/> parameter to the union.
                    /// </summary>
                    /// <param name="binary">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="binary"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static implicit operator global::Emik.SourceGenerators.Choices.Tests.TuplePacking((Emik.SourceGenerators.Choices.Tests.TuplePacking, Emik.SourceGenerators.Choices.Tests.TuplePacking) binary)
                        => new global::Emik.SourceGenerators.Choices.Tests.TuplePacking(binary);

                    /// <summary>
                    /// Explicitly converts the union to the target type <see cref="System.ValueTuple{TuplePacking, TuplePacking}"/>.
                    /// </summary>
                    /// <param name="x">The union to access its property.</param>
                    /// <returns>The getter of the union <paramref name="x"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static explicit operator (Emik.SourceGenerators.Choices.Tests.TuplePacking, Emik.SourceGenerators.Choices.Tests.TuplePacking)(global::Emik.SourceGenerators.Choices.Tests.TuplePacking x)
                        => x.Binary;

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/> class with the variant <see cref="Unary"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/>.
                    /// </summary>
                    /// <param name="unary">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="unary"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.TuplePacking OfUnary(Emik.SourceGenerators.Choices.Tests.TuplePacking unary)
                        => new global::Emik.SourceGenerators.Choices.Tests.TuplePacking(unary);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/> class with the variant <see cref="Binary"/> of type <see cref="System.ValueTuple{TuplePacking, TuplePacking}"/>.
                    /// </summary>
                    /// <param name="binary">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="binary"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.TuplePacking OfBinary((Emik.SourceGenerators.Choices.Tests.TuplePacking, Emik.SourceGenerators.Choices.Tests.TuplePacking) binary)
                        => new global::Emik.SourceGenerators.Choices.Tests.TuplePacking(binary);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/> class with the variant <see cref="Binary"/> of type <see cref="System.ValueTuple{TuplePacking, TuplePacking}"/>.
                    /// </summary>
                    /// <param name="item1">The item1 item within the value to pass into the type.</param>
                    /// <param name="item2">The item2 item within the value to pass into the type.</param>
                    /// <returns>The union containing the parameters.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.TuplePacking OfBinary(Emik.SourceGenerators.Choices.Tests.TuplePacking item1, Emik.SourceGenerators.Choices.Tests.TuplePacking item2)
                        => new global::Emik.SourceGenerators.Choices.Tests.TuplePacking((item1, item2));

                    /// <summary>
                    /// Determines whether the left-hand side is equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator ==(Emik.SourceGenerators.Choices.Tests.TuplePacking? left, Emik.SourceGenerators.Choices.Tests.TuplePacking? right)
                        => left is null ? right is null : right is not null &&
                            left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => global::System.Collections.Generic.EqualityComparer<Emik.SourceGenerators.Choices.Tests.TuplePacking>.Default.Equals(left._binary.Item1!, right._binary.Item1!),
                                _ => left._binary.Equals(right._binary),
                            };

                    /// <summary>
                    /// Determines whether the left-hand side is unequal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is unequal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator !=(Emik.SourceGenerators.Choices.Tests.TuplePacking? left, Emik.SourceGenerators.Choices.Tests.TuplePacking? right)
                        => !(left == right);

                    /// <summary>
                    /// Determines whether the left-hand side is greater than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >(Emik.SourceGenerators.Choices.Tests.TuplePacking? left, Emik.SourceGenerators.Choices.Tests.TuplePacking? right)
                        => left is not null &&
                            (right is null ||
                            left._discriminator > right._discriminator ||
                            left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => global::System.Collections.Generic.Comparer<Emik.SourceGenerators.Choices.Tests.TuplePacking>.Default.Compare(left._binary.Item1!, right._binary.Item1!) > 0,
                                _ => left._binary.CompareTo(right._binary) > 0,
                            });

                    /// <summary>
                    /// Determines whether the left-hand side is greater than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >=(Emik.SourceGenerators.Choices.Tests.TuplePacking? left, Emik.SourceGenerators.Choices.Tests.TuplePacking? right)
                        => left == right || left > right;

                    /// <summary>
                    /// Determines whether the left-hand side is less than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <(Emik.SourceGenerators.Choices.Tests.TuplePacking? left, Emik.SourceGenerators.Choices.Tests.TuplePacking? right)
                        => right > left;

                    /// <summary>
                    /// Determines whether the left-hand side is less than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <=(Emik.SourceGenerators.Choices.Tests.TuplePacking? left, Emik.SourceGenerators.Choices.Tests.TuplePacking? right)
                        => right >= left;

                    /// <inheritdoc cref="object.Equals(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override bool Equals(object? obj)
                        => obj is global::Emik.SourceGenerators.Choices.Tests.TuplePacking x && Equals(x);

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public bool Equals(Emik.SourceGenerators.Choices.Tests.TuplePacking? other)
                        => this == other;

                    /// <inheritdoc cref="IComparable.CompareTo(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int CompareTo(object? obj)
                        => obj is null ? 1 : obj is global::Emik.SourceGenerators.Choices.Tests.TuplePacking x ? CompareTo(x) : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public int CompareTo(Emik.SourceGenerators.Choices.Tests.TuplePacking? other)
                        => other is null ? 1 : Equals(other) ? 0 : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override int GetHashCode()
                        => unchecked(_discriminator * 9839) ^
                        (_discriminator switch
                        {
                            0 => _binary.Item1!.GetHashCode(),
                            _ => _binary.GetHashCode(),
                        });

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override string ToString()
                        => _discriminator switch
                        {
                            0 => $"{nameof(Unary)}({_binary.Item1!})",
                            _ => $"{nameof(Binary)}({_binary})",
                        };

                    /// <summary>
                    /// Invokes the callback based on current variance.
                    /// </summary>
                    /// <param name="onUnary">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/> class with the variant <see cref="Unary"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/> is held.</param>
                    /// <param name="onBinary">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/> class with the variant <see cref="Binary"/> of type <see cref="System.ValueTuple{TuplePacking, TuplePacking}"/> is held.</param>
                    /// <returns>Itself.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public Emik.SourceGenerators.Choices.Tests.TuplePacking? Map(
                        global::System.Action<Emik.SourceGenerators.Choices.Tests.TuplePacking>? onUnary = null,
                        global::System.Action<(Emik.SourceGenerators.Choices.Tests.TuplePacking, Emik.SourceGenerators.Choices.Tests.TuplePacking)>? onBinary = null
                    )
                    {
                        switch (_discriminator)
                        {
                            case 0:
                                onUnary?.Invoke(_binary.Item1!);
                                return this;
                            default:
                                onBinary?.Invoke(_binary);
                                return this;
                        }
                    }

                    /// <summary>
                    /// Maps each variant to <typeparamref name="TMappingResult"/>.
                    /// </summary>
                    /// <typeparam name="TMappingResult">The resulting type from the mapping.</typeparam>
                    /// <param name="onUnary">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/> class with the variant <see cref="Unary"/> of type <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/> is held.</param>
                    /// <param name="onBinary">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.TuplePacking"/> class with the variant <see cref="Binary"/> of type <see cref="System.ValueTuple{TuplePacking, TuplePacking}"/> is held.</param>
                    /// <returns>
                    /// The resulting value from one of the parameters based on the current state of the object.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public TMappingResult Map<TMappingResult>(
                        global::System.Func<Emik.SourceGenerators.Choices.Tests.TuplePacking, TMappingResult> onUnary,
                        global::System.Func<(Emik.SourceGenerators.Choices.Tests.TuplePacking, Emik.SourceGenerators.Choices.Tests.TuplePacking), TMappingResult> onBinary
                    )
                        => _discriminator switch
                        {
                            0 => onUnary(_binary.Item1!),
                            _ => onBinary(_binary),
                        };

                    /// <summary>
                    /// Gets the underlying value.
                    /// </summary>
                    /// <returns>
                    /// The underlying value from this instance.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public object GetUnderlyingValue()
                        => _discriminator switch
                        {
                            0 => _binary.Item1!,
                            _ => _binary,
                        };

                    /// <inheritdoc cref="object.GetType()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.16.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Type GetUnderlyingType()
                        => _discriminator switch
                        {
                            0 => typeof(Emik.SourceGenerators.Choices.Tests.TuplePacking),
                            _ => typeof((Emik.SourceGenerators.Choices.Tests.TuplePacking, Emik.SourceGenerators.Choices.Tests.TuplePacking)),
                        };
                }
            }
        }
    }
}

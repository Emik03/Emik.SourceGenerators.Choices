// <auto-generated/>
// ReSharper disable RedundantNameQualifier
// ReSharper disable once CheckNamespace
#nullable enable
#pragma warning disable
namespace Emik
{
    namespace SourceGenerators
    {
        namespace Choices
        {
            namespace Tests
            {
                /// <inheritdoc cref="Emik.SourceGenerators.Choices.Tests.UnderlyingInt"/>
                /// <remarks>
                ///     <para>
                ///         The type <see cref="Emik.SourceGenerators.Choices.Tests.UnderlyingInt"/>
                ///         is an immutable disjoint union representing the following variants:
                ///     </para>
                ///     <list type="table">
                ///         <listheader>
                ///             <term>
                ///                 <c>Name</c> <see langword="as"/> <c>Type</c>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             Predicate
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             Factories
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </listheader>
                ///         <item>
                ///             <term>
                ///                 <see cref="Left"/> <see langword="as"/> <see cref="int"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsLeft"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <see cref="OfLeft(int)"/>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <c>Center</c> <see langword="as"/> <see cref="System.ValueTuple"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsCenter"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <list type="number">
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="OfCenter(System.ValueTuple)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="Emik.SourceGenerators.Choices.Tests.UnderlyingInt(System.ValueTuple)"/>
                ///                                     </description>
                ///                                 </item>
                ///                                 <item>
                ///                                     <description>
                ///                                         <see cref="op_Implicit(System.ValueTuple)"/>
                ///                                     </description>
                ///                                 </item>
                ///                             </list>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///         <item>
                ///             <term>
                ///                 <see cref="Right"/> <see langword="as"/> <see cref="int"/>
                ///                 <list type="bullet">
                ///                     <item>
                ///                         <description>
                ///                             <see cref="IsRight"/>
                ///                         </description>
                ///                     </item>
                ///                     <item>
                ///                         <description>
                ///                             <see cref="OfRight(int)"/>
                ///                         </description>
                ///                     </item>
                ///                 </list>
                ///             </term>
                ///         </item>
                ///     </list>
                /// </remarks>
                [global::System.Runtime.InteropServices.StructLayoutAttribute(global::System.Runtime.InteropServices.LayoutKind.Auto)]
                partial struct UnderlyingInt :
                    global::System.IComparable,
                    global::System.IComparable<object>,
                    global::System.IComparable<global::Emik.SourceGenerators.Choices.Tests.UnderlyingInt>,
#if NET7_0_OR_GREATER
                    global::System.Numerics.IComparisonOperators<global::Emik.SourceGenerators.Choices.Tests.UnderlyingInt, global::Emik.SourceGenerators.Choices.Tests.UnderlyingInt, bool>,
#endif
                    global::System.IEquatable<object>,
                    global::System.IEquatable<global::Emik.SourceGenerators.Choices.Tests.UnderlyingInt>
                {
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    private readonly byte _discriminator;

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.UnderlyingInt"/> struct with the variant <see cref="Left"/> of type <see cref="int"/>.
                    /// </summary>
                    /// <param name="left">The variant.</param>
                    /// <param name="x">The discriminator.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    private UnderlyingInt(int left, byte x)
                    {
                        _discriminator = x;
                        _ = x is 0 ? Left = left : Right = left;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.UnderlyingInt"/> struct with the variant <c>Center</c> of type <see cref="System.ValueTuple"/>.
                    /// </summary>
                    /// <param name="center">The variant.</param>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public UnderlyingInt(System.ValueTuple center = default)
                    {
                        _discriminator = 1;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.UnderlyingInt"/> is the variant <see cref="Left"/> of type <see cref="int"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    public readonly bool IsLeft
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Left")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 0;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.UnderlyingInt"/> is the variant <c>Center</c> of type <see cref="System.ValueTuple"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    public readonly bool IsCenter
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 1;
                    }

                    /// <summary>
                    /// Gets the value determining if the <see cref="Emik.SourceGenerators.Choices.Tests.UnderlyingInt"/> is the variant <see cref="Right"/> of type <see cref="int"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    public readonly bool IsRight
                    {
                        [global::System.Diagnostics.Contracts.PureAttribute]
                        [global::System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute(true, "Right")]
                        [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                        get => _discriminator is 2;
                    }

                    /// <summary>
                    /// Implicitly converts the <see cref="System.ValueTuple"/> parameter to the union.
                    /// </summary>
                    /// <param name="center">The parameter to pass onto the constructor.</param>
                    /// <returns>The union containing the parameter <paramref name="center"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static implicit operator global::Emik.SourceGenerators.Choices.Tests.UnderlyingInt(System.ValueTuple center)
                        => new global::Emik.SourceGenerators.Choices.Tests.UnderlyingInt(center);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.UnderlyingInt"/> struct with the variant <see cref="Left"/> of type <see cref="int"/>.
                    /// </summary>
                    /// <param name="left">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="left"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.UnderlyingInt OfLeft(int left)
                        => new global::Emik.SourceGenerators.Choices.Tests.UnderlyingInt(left, 0);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.UnderlyingInt"/> struct with the variant <c>Center</c> of type <see cref="System.ValueTuple"/>.
                    /// </summary>
                    /// <param name="center">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="center"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.UnderlyingInt OfCenter(System.ValueTuple center = default)
                        => new global::Emik.SourceGenerators.Choices.Tests.UnderlyingInt(center);

                    /// <summary>
                    /// Creates a new instance of the <see cref="Emik.SourceGenerators.Choices.Tests.UnderlyingInt"/> struct with the variant <see cref="Right"/> of type <see cref="int"/>.
                    /// </summary>
                    /// <param name="right">The value to pass into the type.</param>
                    /// <returns>The union containing the parameter <paramref name="right"/>.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static global::Emik.SourceGenerators.Choices.Tests.UnderlyingInt OfRight(int right)
                        => new global::Emik.SourceGenerators.Choices.Tests.UnderlyingInt(right, 2);

                    /// <summary>
                    /// Determines whether the left-hand side is equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator ==(Emik.SourceGenerators.Choices.Tests.UnderlyingInt left, Emik.SourceGenerators.Choices.Tests.UnderlyingInt right)
                        => left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => left.Left == right.Left,
                                1 => true,
                                _ => left.Right == right.Right,
                            };

                    /// <summary>
                    /// Determines whether the left-hand side is unequal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is unequal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator !=(Emik.SourceGenerators.Choices.Tests.UnderlyingInt left, Emik.SourceGenerators.Choices.Tests.UnderlyingInt right)
                        => !(left == right);

                    /// <summary>
                    /// Determines whether the left-hand side is greater than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >(Emik.SourceGenerators.Choices.Tests.UnderlyingInt left, Emik.SourceGenerators.Choices.Tests.UnderlyingInt right)
                        => left._discriminator > right._discriminator ||
                            left._discriminator == right._discriminator &&
                            left._discriminator switch
                            {
                                0 => left.Left > right.Left,
                                1 => true,
                                _ => left.Right > right.Right,
                            };

                    /// <summary>
                    /// Determines whether the left-hand side is greater than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is greater than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator >=(Emik.SourceGenerators.Choices.Tests.UnderlyingInt left, Emik.SourceGenerators.Choices.Tests.UnderlyingInt right)
                        => left == right || left > right;

                    /// <summary>
                    /// Determines whether the left-hand side is less than the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <(Emik.SourceGenerators.Choices.Tests.UnderlyingInt left, Emik.SourceGenerators.Choices.Tests.UnderlyingInt right)
                        => right > left;

                    /// <summary>
                    /// Determines whether the left-hand side is less than or equal to the right.
                    /// </summary>
                    /// <param name="left">The left-hand side.</param>
                    /// <param name="right">The right-hand side.</param>
                    /// <returns>
                    /// The value determining whether the parameter <paramref name="left"/>
                    /// is less than or equal to the parameter <paramref name="right"/>.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public static bool operator <=(Emik.SourceGenerators.Choices.Tests.UnderlyingInt left, Emik.SourceGenerators.Choices.Tests.UnderlyingInt right)
                        => right >= left;

                    /// <inheritdoc cref="object.Equals(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public override bool Equals(object? obj)
                        => obj is global::Emik.SourceGenerators.Choices.Tests.UnderlyingInt x && Equals(x);

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly bool Equals(Emik.SourceGenerators.Choices.Tests.UnderlyingInt other)
                        => this == other;

                    /// <inheritdoc cref="IComparable.CompareTo(object)"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly int CompareTo(object? obj)
                        => obj is null ? 1 : obj is global::Emik.SourceGenerators.Choices.Tests.UnderlyingInt x ? CompareTo(x) : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly int CompareTo(Emik.SourceGenerators.Choices.Tests.UnderlyingInt other)
                        => Equals(other) ? 0 : -1;

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly override int GetHashCode()
                        => unchecked(_discriminator * 3517) ^
                        (_discriminator switch
                        {
                            0 => Left.GetHashCode(),
                            1 => 0,
                            _ => Right.GetHashCode(),
                        });

                    /// <inheritdoc />
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly override string ToString()
                        => _discriminator switch
                        {
                            0 => $"{nameof(Left)}({Left})",
                            1 => "Center",
                            _ => $"{nameof(Right)}({Right})",
                        };

                    /// <summary>
                    /// Invokes the callback based on current variance.
                    /// </summary>
                    /// <param name="onLeft">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.UnderlyingInt"/> struct with the variant <see cref="Left"/> of type <see cref="int"/> is held.</param>
                    /// <param name="onCenter">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.UnderlyingInt"/> struct with the variant <c>Center</c> of type <see cref="System.ValueTuple"/> is held.</param>
                    /// <param name="onRight">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.UnderlyingInt"/> struct with the variant <see cref="Right"/> of type <see cref="int"/> is held.</param>
                    /// <returns>Itself.</returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly Emik.SourceGenerators.Choices.Tests.UnderlyingInt Map(
                        global::System.Action<int>? onLeft = null,
                        global::System.Action? onCenter = null,
                        global::System.Action<int>? onRight = null
                    )
                    {
                        switch (_discriminator)
                        {
                            case 0:
                                onLeft?.Invoke(Left);
                                return this;
                            case 1:
                                onCenter?.Invoke();
                                return this;
                            default:
                                onRight?.Invoke(Right);
                                return this;
                        }
                    }

                    /// <summary>
                    /// Maps each variant to <typeparamref name="TMappingResult"/>.
                    /// </summary>
                    /// <typeparam name="TMappingResult">The resulting type from the mapping.</typeparam>
                    /// <param name="onLeft">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.UnderlyingInt"/> struct with the variant <see cref="Left"/> of type <see cref="int"/> is held.</param>
                    /// <param name="onCenter">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.UnderlyingInt"/> struct with the variant <c>Center</c> of type <see cref="System.ValueTuple"/> is held.</param>
                    /// <param name="onRight">The callback to use when the contract of the <see cref="Emik.SourceGenerators.Choices.Tests.UnderlyingInt"/> struct with the variant <see cref="Right"/> of type <see cref="int"/> is held.</param>
                    /// <returns>
                    /// The resulting value from one of the parameters based on the current state of the object.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly TMappingResult Map<TMappingResult>(
                        global::System.Func<int, TMappingResult> onLeft,
                        global::System.Func<TMappingResult> onCenter,
                        global::System.Func<int, TMappingResult> onRight
                    )
                        => _discriminator switch
                        {
                            0 => onLeft(Left),
                            1 => onCenter(),
                            _ => onRight(Right),
                        };

                    /// <summary>
                    /// Gets the underlying value.
                    /// </summary>
                    /// <returns>
                    /// The underlying value from this instance.
                    /// </returns>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Diagnostics.Contracts.PureAttribute]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public readonly int GetUnderlyingValue()
                        => _discriminator switch
                        {
                            0 => Left,
                            1 => default,
                            _ => Right,
                        };

                    /// <inheritdoc cref="object.GetType()"/>
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Emik.SourceGenerators.Choices", "1.4.1.0")]
                    [global::System.Runtime.CompilerServices.MethodImplAttribute(256)]
                    public System.Type GetUnderlyingType()
                        => _discriminator switch
                        {
                            0 => typeof(int),
                            1 => typeof(System.ValueTuple),
                            _ => typeof(int),
                        };
                }
            }
        }
    }
}
